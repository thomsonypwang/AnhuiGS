<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\gateway_board.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\gateway_board.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Wed May 24 10:04:12 2023
<BR><P>
<H3>Maximum Stack Usage =       3872 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
mqtt_control_thread &rArr; report_gate_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1e]">NMI_Handler</a><BR>
 <LI><a href="#[1f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">HardFault_Handler</a><BR>
 <LI><a href="#[20]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">MemManage_Handler</a><BR>
 <LI><a href="#[21]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">BusFault_Handler</a><BR>
 <LI><a href="#[22]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">UsageFault_Handler</a><BR>
 <LI><a href="#[24]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">DebugMon_Handler</a><BR>
 <LI><a href="#[a7]">IRQ128_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a7]">IRQ128_Handler</a><BR>
 <LI><a href="#[202]">skip_to_last</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[202]">skip_to_last</a><BR>
 <LI><a href="#[201]">__json_is_valid</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[201]">__json_is_valid</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">BusFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[24]">DebugMon_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[ca]">EXTINT_POWER_OFF_IrqCallback</a> from bat_dir.o(.text.EXTINT_POWER_OFF_IrqCallback) referenced 2 times from bat_dir.o(.text.bat_io_init)
 <LI><a href="#[c1]">FreeRTOS_disconnect</a> from eth_to_freertos.o(.text.FreeRTOS_disconnect) referenced 2 times from eth_to_freertos.o(.text.NetworkInit)
 <LI><a href="#[bf]">FreeRTOS_read</a> from eth_to_freertos.o(.text.FreeRTOS_read) referenced 2 times from eth_to_freertos.o(.text.NetworkInit)
 <LI><a href="#[c0]">FreeRTOS_write</a> from eth_to_freertos.o(.text.FreeRTOS_write) referenced 2 times from eth_to_freertos.o(.text.NetworkInit)
 <LI><a href="#[1f]">HardFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[27]">IRQ000_Handler</a> from hc32_ll_interrupts.o(.text.IRQ000_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[28]">IRQ001_Handler</a> from hc32_ll_interrupts.o(.text.IRQ001_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[29]">IRQ002_Handler</a> from hc32_ll_interrupts.o(.text.IRQ002_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2a]">IRQ003_Handler</a> from hc32_ll_interrupts.o(.text.IRQ003_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2b]">IRQ004_Handler</a> from hc32_ll_interrupts.o(.text.IRQ004_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2c]">IRQ005_Handler</a> from hc32_ll_interrupts.o(.text.IRQ005_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2d]">IRQ006_Handler</a> from hc32_ll_interrupts.o(.text.IRQ006_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2e]">IRQ007_Handler</a> from hc32_ll_interrupts.o(.text.IRQ007_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[2f]">IRQ008_Handler</a> from hc32_ll_interrupts.o(.text.IRQ008_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[30]">IRQ009_Handler</a> from hc32_ll_interrupts.o(.text.IRQ009_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[31]">IRQ010_Handler</a> from hc32_ll_interrupts.o(.text.IRQ010_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[32]">IRQ011_Handler</a> from hc32_ll_interrupts.o(.text.IRQ011_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[33]">IRQ012_Handler</a> from hc32_ll_interrupts.o(.text.IRQ012_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[34]">IRQ013_Handler</a> from hc32_ll_interrupts.o(.text.IRQ013_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[35]">IRQ014_Handler</a> from hc32_ll_interrupts.o(.text.IRQ014_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[36]">IRQ015_Handler</a> from hc32_ll_interrupts.o(.text.IRQ015_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[37]">IRQ016_Handler</a> from hc32_ll_interrupts.o(.text.IRQ016_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[38]">IRQ017_Handler</a> from hc32_ll_interrupts.o(.text.IRQ017_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[39]">IRQ018_Handler</a> from hc32_ll_interrupts.o(.text.IRQ018_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3a]">IRQ019_Handler</a> from hc32_ll_interrupts.o(.text.IRQ019_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3b]">IRQ020_Handler</a> from hc32_ll_interrupts.o(.text.IRQ020_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3c]">IRQ021_Handler</a> from hc32_ll_interrupts.o(.text.IRQ021_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3d]">IRQ022_Handler</a> from hc32_ll_interrupts.o(.text.IRQ022_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3e]">IRQ023_Handler</a> from hc32_ll_interrupts.o(.text.IRQ023_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[3f]">IRQ024_Handler</a> from hc32_ll_interrupts.o(.text.IRQ024_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[40]">IRQ025_Handler</a> from hc32_ll_interrupts.o(.text.IRQ025_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[41]">IRQ026_Handler</a> from hc32_ll_interrupts.o(.text.IRQ026_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[42]">IRQ027_Handler</a> from hc32_ll_interrupts.o(.text.IRQ027_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[43]">IRQ028_Handler</a> from hc32_ll_interrupts.o(.text.IRQ028_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[44]">IRQ029_Handler</a> from hc32_ll_interrupts.o(.text.IRQ029_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[45]">IRQ030_Handler</a> from hc32_ll_interrupts.o(.text.IRQ030_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[46]">IRQ031_Handler</a> from hc32_ll_interrupts.o(.text.IRQ031_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[47]">IRQ032_Handler</a> from hc32_ll_interrupts.o(.text.IRQ032_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[48]">IRQ033_Handler</a> from hc32_ll_interrupts.o(.text.IRQ033_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[49]">IRQ034_Handler</a> from hc32_ll_interrupts.o(.text.IRQ034_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4a]">IRQ035_Handler</a> from hc32_ll_interrupts.o(.text.IRQ035_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4b]">IRQ036_Handler</a> from hc32_ll_interrupts.o(.text.IRQ036_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4c]">IRQ037_Handler</a> from hc32_ll_interrupts.o(.text.IRQ037_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4d]">IRQ038_Handler</a> from hc32_ll_interrupts.o(.text.IRQ038_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4e]">IRQ039_Handler</a> from hc32_ll_interrupts.o(.text.IRQ039_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[4f]">IRQ040_Handler</a> from hc32_ll_interrupts.o(.text.IRQ040_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[50]">IRQ041_Handler</a> from hc32_ll_interrupts.o(.text.IRQ041_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[51]">IRQ042_Handler</a> from hc32_ll_interrupts.o(.text.IRQ042_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[52]">IRQ043_Handler</a> from hc32_ll_interrupts.o(.text.IRQ043_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[53]">IRQ044_Handler</a> from hc32_ll_interrupts.o(.text.IRQ044_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[54]">IRQ045_Handler</a> from hc32_ll_interrupts.o(.text.IRQ045_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[55]">IRQ046_Handler</a> from hc32_ll_interrupts.o(.text.IRQ046_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[56]">IRQ047_Handler</a> from hc32_ll_interrupts.o(.text.IRQ047_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[57]">IRQ048_Handler</a> from hc32_ll_interrupts.o(.text.IRQ048_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[58]">IRQ049_Handler</a> from hc32_ll_interrupts.o(.text.IRQ049_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[59]">IRQ050_Handler</a> from hc32_ll_interrupts.o(.text.IRQ050_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5a]">IRQ051_Handler</a> from hc32_ll_interrupts.o(.text.IRQ051_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5b]">IRQ052_Handler</a> from hc32_ll_interrupts.o(.text.IRQ052_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5c]">IRQ053_Handler</a> from hc32_ll_interrupts.o(.text.IRQ053_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5d]">IRQ054_Handler</a> from hc32_ll_interrupts.o(.text.IRQ054_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5e]">IRQ055_Handler</a> from hc32_ll_interrupts.o(.text.IRQ055_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[5f]">IRQ056_Handler</a> from hc32_ll_interrupts.o(.text.IRQ056_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[60]">IRQ057_Handler</a> from hc32_ll_interrupts.o(.text.IRQ057_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[61]">IRQ058_Handler</a> from hc32_ll_interrupts.o(.text.IRQ058_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[62]">IRQ059_Handler</a> from hc32_ll_interrupts.o(.text.IRQ059_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[63]">IRQ060_Handler</a> from hc32_ll_interrupts.o(.text.IRQ060_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[64]">IRQ061_Handler</a> from hc32_ll_interrupts.o(.text.IRQ061_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[65]">IRQ062_Handler</a> from hc32_ll_interrupts.o(.text.IRQ062_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[66]">IRQ063_Handler</a> from hc32_ll_interrupts.o(.text.IRQ063_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[67]">IRQ064_Handler</a> from hc32_ll_interrupts.o(.text.IRQ064_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[68]">IRQ065_Handler</a> from hc32_ll_interrupts.o(.text.IRQ065_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[69]">IRQ066_Handler</a> from hc32_ll_interrupts.o(.text.IRQ066_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6a]">IRQ067_Handler</a> from hc32_ll_interrupts.o(.text.IRQ067_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6b]">IRQ068_Handler</a> from hc32_ll_interrupts.o(.text.IRQ068_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6c]">IRQ069_Handler</a> from hc32_ll_interrupts.o(.text.IRQ069_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6d]">IRQ070_Handler</a> from hc32_ll_interrupts.o(.text.IRQ070_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6e]">IRQ071_Handler</a> from hc32_ll_interrupts.o(.text.IRQ071_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[6f]">IRQ072_Handler</a> from hc32_ll_interrupts.o(.text.IRQ072_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[70]">IRQ073_Handler</a> from hc32_ll_interrupts.o(.text.IRQ073_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[71]">IRQ074_Handler</a> from hc32_ll_interrupts.o(.text.IRQ074_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[72]">IRQ075_Handler</a> from hc32_ll_interrupts.o(.text.IRQ075_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[73]">IRQ076_Handler</a> from hc32_ll_interrupts.o(.text.IRQ076_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[74]">IRQ077_Handler</a> from hc32_ll_interrupts.o(.text.IRQ077_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[75]">IRQ078_Handler</a> from hc32_ll_interrupts.o(.text.IRQ078_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[76]">IRQ079_Handler</a> from hc32_ll_interrupts.o(.text.IRQ079_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[77]">IRQ080_Handler</a> from hc32_ll_interrupts.o(.text.IRQ080_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[78]">IRQ081_Handler</a> from hc32_ll_interrupts.o(.text.IRQ081_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[79]">IRQ082_Handler</a> from hc32_ll_interrupts.o(.text.IRQ082_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7a]">IRQ083_Handler</a> from hc32_ll_interrupts.o(.text.IRQ083_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7b]">IRQ084_Handler</a> from hc32_ll_interrupts.o(.text.IRQ084_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7c]">IRQ085_Handler</a> from hc32_ll_interrupts.o(.text.IRQ085_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7d]">IRQ086_Handler</a> from hc32_ll_interrupts.o(.text.IRQ086_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7e]">IRQ087_Handler</a> from hc32_ll_interrupts.o(.text.IRQ087_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[7f]">IRQ088_Handler</a> from hc32_ll_interrupts.o(.text.IRQ088_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[80]">IRQ089_Handler</a> from hc32_ll_interrupts.o(.text.IRQ089_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[81]">IRQ090_Handler</a> from hc32_ll_interrupts.o(.text.IRQ090_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[82]">IRQ091_Handler</a> from hc32_ll_interrupts.o(.text.IRQ091_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[83]">IRQ092_Handler</a> from hc32_ll_interrupts.o(.text.IRQ092_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[84]">IRQ093_Handler</a> from hc32_ll_interrupts.o(.text.IRQ093_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[85]">IRQ094_Handler</a> from hc32_ll_interrupts.o(.text.IRQ094_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[86]">IRQ095_Handler</a> from hc32_ll_interrupts.o(.text.IRQ095_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[87]">IRQ096_Handler</a> from hc32_ll_interrupts.o(.text.IRQ096_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[88]">IRQ097_Handler</a> from hc32_ll_interrupts.o(.text.IRQ097_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[89]">IRQ098_Handler</a> from hc32_ll_interrupts.o(.text.IRQ098_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8a]">IRQ099_Handler</a> from hc32_ll_interrupts.o(.text.IRQ099_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8b]">IRQ100_Handler</a> from hc32_ll_interrupts.o(.text.IRQ100_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8c]">IRQ101_Handler</a> from hc32_ll_interrupts.o(.text.IRQ101_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8d]">IRQ102_Handler</a> from hc32_ll_interrupts.o(.text.IRQ102_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8e]">IRQ103_Handler</a> from hc32_ll_interrupts.o(.text.IRQ103_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[8f]">IRQ104_Handler</a> from hc32_ll_interrupts.o(.text.IRQ104_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[90]">IRQ105_Handler</a> from hc32_ll_interrupts.o(.text.IRQ105_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[91]">IRQ106_Handler</a> from hc32_ll_interrupts.o(.text.IRQ106_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[92]">IRQ107_Handler</a> from hc32_ll_interrupts.o(.text.IRQ107_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[93]">IRQ108_Handler</a> from hc32_ll_interrupts.o(.text.IRQ108_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[94]">IRQ109_Handler</a> from hc32_ll_interrupts.o(.text.IRQ109_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[95]">IRQ110_Handler</a> from hc32_ll_interrupts.o(.text.IRQ110_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[96]">IRQ111_Handler</a> from hc32_ll_interrupts.o(.text.IRQ111_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[97]">IRQ112_Handler</a> from hc32_ll_interrupts.o(.text.IRQ112_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[98]">IRQ113_Handler</a> from hc32_ll_interrupts.o(.text.IRQ113_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[99]">IRQ114_Handler</a> from hc32_ll_interrupts.o(.text.IRQ114_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9a]">IRQ115_Handler</a> from hc32_ll_interrupts.o(.text.IRQ115_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9b]">IRQ116_Handler</a> from hc32_ll_interrupts.o(.text.IRQ116_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9c]">IRQ117_Handler</a> from hc32_ll_interrupts.o(.text.IRQ117_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9d]">IRQ118_Handler</a> from hc32_ll_interrupts.o(.text.IRQ118_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9e]">IRQ119_Handler</a> from hc32_ll_interrupts.o(.text.IRQ119_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[9f]">IRQ120_Handler</a> from hc32_ll_interrupts.o(.text.IRQ120_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a0]">IRQ121_Handler</a> from hc32_ll_interrupts.o(.text.IRQ121_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a1]">IRQ122_Handler</a> from hc32_ll_interrupts.o(.text.IRQ122_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a2]">IRQ123_Handler</a> from hc32_ll_interrupts.o(.text.IRQ123_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a3]">IRQ124_Handler</a> from hc32_ll_interrupts.o(.text.IRQ124_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a4]">IRQ125_Handler</a> from hc32_ll_interrupts.o(.text.IRQ125_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a5]">IRQ126_Handler</a> from hc32_ll_interrupts.o(.text.IRQ126_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a6]">IRQ127_Handler</a> from hc32_ll_interrupts.o(.text.IRQ127_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a7]">IRQ128_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a8]">IRQ129_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[a9]">IRQ130_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[aa]">IRQ131_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[ab]">IRQ132_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[ac]">IRQ133_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[ad]">IRQ134_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[ae]">IRQ135_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[af]">IRQ136_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b0]">IRQ137_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b1]">IRQ138_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b2]">IRQ139_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b3]">IRQ140_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b4]">IRQ141_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b5]">IRQ142_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b6]">IRQ143_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[dd]">IsKeyDownClr</a> from key_dir.o(.text.IsKeyDownClr) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[dc]">IsKeyDownDown</a> from key_dir.o(.text.IsKeyDownDown) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[da]">IsKeyDownMenu</a> from key_dir.o(.text.IsKeyDownMenu) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[de]">IsKeyDownOk</a> from key_dir.o(.text.IsKeyDownOk) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[df]">IsKeyDownRST</a> from key_dir.o(.text.IsKeyDownRST) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[db]">IsKeyDownUp</a> from key_dir.o(.text.IsKeyDownUp) referenced 2 times from key_dir.o(.text.key_var)
 <LI><a href="#[20]">MemManage_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1e]">NMI_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[25]">PendSV_Handler</a> from port.o(.text.PendSV_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[1d]">Reset_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[23]">SVC_Handler</a> from port.o(.text.SVC_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[26]">SysTick_Handler</a> from port.o(.text.SysTick_Handler) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[b8]">SystemInit</a> from system_hc32f4a0.o(.text.SystemInit) referenced from startup_hc32f4a0.o(.text)
 <LI><a href="#[cc]">USART1_RxError_IrqCallback</a> from camera_dir.o(.text.USART1_RxError_IrqCallback) referenced 2 times from camera_dir.o(.text.camera_rs232_init)
 <LI><a href="#[cd]">USART1_RxFull_IrqCallback</a> from camera_dir.o(.text.USART1_RxFull_IrqCallback) referenced 2 times from camera_dir.o(.text.camera_rs232_init)
 <LI><a href="#[ce]">USART1_RxTimeout_IrqCallback</a> from camera_dir.o(.text.USART1_RxTimeout_IrqCallback) referenced 2 times from camera_dir.o(.text.camera_rs232_init)
 <LI><a href="#[e0]">USART2_RxError_IrqCallback</a> from lock_rs485_handle.o(.text.USART2_RxError_IrqCallback) referenced 2 times from lock_rs485_handle.o(.text.lock_control_thread)
 <LI><a href="#[e1]">USART2_RxFull_IrqCallback</a> from lock_rs485_handle.o(.text.USART2_RxFull_IrqCallback) referenced 2 times from lock_rs485_handle.o(.text.lock_control_thread)
 <LI><a href="#[e2]">USART2_RxTimeout_IrqCallback</a> from lock_rs485_handle.o(.text.USART2_RxTimeout_IrqCallback) referenced 2 times from lock_rs485_handle.o(.text.lock_control_thread)
 <LI><a href="#[d5]">USART3_RxError_IrqCallback</a> from gps_control.o(.text.USART3_RxError_IrqCallback) referenced 2 times from gps_control.o(.text.gps_init)
 <LI><a href="#[d6]">USART3_RxFull_IrqCallback</a> from gps_control.o(.text.USART3_RxFull_IrqCallback) referenced 2 times from gps_control.o(.text.gps_init)
 <LI><a href="#[e5]">USART4_RxError_IrqCallback</a> from monitor_board_handle.o(.text.USART4_RxError_IrqCallback) referenced 2 times from monitor_board_handle.o(.text.modbus_control_thread)
 <LI><a href="#[e6]">USART4_RxFull_IrqCallback</a> from monitor_board_handle.o(.text.USART4_RxFull_IrqCallback) referenced 2 times from monitor_board_handle.o(.text.modbus_control_thread)
 <LI><a href="#[c3]">USART6_RxError_IrqCallback</a> from nb_uart_dir.o(.text.USART6_RxError_IrqCallback) referenced 2 times from nb_uart_dir.o(.text.at_uart_init)
 <LI><a href="#[c4]">USART6_RxFull_IrqCallback</a> from nb_uart_dir.o(.text.USART6_RxFull_IrqCallback) referenced 2 times from nb_uart_dir.o(.text.at_uart_init)
 <LI><a href="#[c5]">USART6_RxTimeout_IrqCallback</a> from nb_uart_dir.o(.text.USART6_RxTimeout_IrqCallback) referenced 2 times from nb_uart_dir.o(.text.at_uart_init)
 <LI><a href="#[c6]">USART7_RxError_IrqCallback</a> from autoeclosing_rs485_handle.o(.text.USART7_RxError_IrqCallback) referenced 2 times from autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
 <LI><a href="#[c7]">USART7_RxFull_IrqCallback</a> from autoeclosing_rs485_handle.o(.text.USART7_RxFull_IrqCallback) referenced 2 times from autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
 <LI><a href="#[c8]">USART7_RxTimeout_IrqCallback</a> from autoeclosing_rs485_handle.o(.text.USART7_RxTimeout_IrqCallback) referenced 2 times from autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
 <LI><a href="#[22]">UsageFault_Handler</a> from startup_hc32f4a0.o(.text) referenced from startup_hc32f4a0.o(RESET)
 <LI><a href="#[f9]">__NVIC_SystemReset</a> from eth_handle.o(.text.__NVIC_SystemReset) referenced 2 times from eth_handle.o(.text.w5500_control_thread)
 <LI><a href="#[b9]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_hc32f4a0.o(.text)
 <LI><a href="#[bb]">_sbackspace</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[bc]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ba]">_sgetc</a> from _sgetc.o(.text) referenced 2 times from vsscanf.o(.text)
 <LI><a href="#[105]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[105]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0vsnprintf)
 <LI><a href="#[106]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[18]">aiot_mqtt_event_handler</a> from aiot_mqtt_api.o(.text.aiot_mqtt_event_handler) referenced 2 times from aiot_module_api.o(.data.g_urc_table)
 <LI><a href="#[17]">aiot_mqtt_recv_handler</a> from aiot_mqtt_api.o(.text.aiot_mqtt_recv_handler) referenced 30 times from aiot_module_api.o(.data.g_urc_table)
 <LI><a href="#[c9]">autoeclosing_control_thread</a> from autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread) referenced 2 times from autoeclosing_rs485_handle.o(.text.autoeclosing_process_init)
 <LI><a href="#[be]">bufchar</a> from mqttpacket.o(.text.bufchar) referenced 2 times from mqttpacket.o(.text.MQTTPacket_decodeBuf)
 <LI><a href="#[cb]">camera_control_thread</a> from camera_handle.o(.text.camera_control_thread) referenced 2 times from camera_handle.o(.text.camera_process_init)
 <LI><a href="#[cf]">camera_tcpc_control_thread</a> from camera_handle.o(.text.camera_tcpc_control_thread) referenced 2 times from camera_handle.o(.text.camera_tcpc_init)
 <LI><a href="#[d0]">circuit_breaker_USART7_RxError_IrqCallback</a> from circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxError_IrqCallback) referenced 2 times from circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
 <LI><a href="#[d1]">circuit_breaker_USART7_RxFull_IrqCallback</a> from circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxFull_IrqCallback) referenced 2 times from circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
 <LI><a href="#[d2]">circuit_breaker_USART7_RxTimeout_IrqCallback</a> from circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxTimeout_IrqCallback) referenced 2 times from circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
 <LI><a href="#[d3]">circuit_breaker_control_thread</a> from circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread) referenced 2 times from circuit_breaker_rs485_handle.o(.text.circuit_breaker_process_init)
 <LI><a href="#[c2]">client_parser</a> from aiot_at_client_api.o(.text.client_parser) referenced 2 times from aiot_at_client_api.o(.text.at_client_para_init)
 <LI><a href="#[b]">core_sysdep_free</a> from posix_port.o(.text.core_sysdep_free) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[a]">core_sysdep_malloc</a> from posix_port.o(.text.core_sysdep_malloc) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[12]">core_sysdep_mutex_deinit</a> from posix_port.o(.text.core_sysdep_mutex_deinit) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[f]">core_sysdep_mutex_init</a> from posix_port.o(.text.core_sysdep_mutex_init) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[10]">core_sysdep_mutex_lock</a> from posix_port.o(.text.core_sysdep_mutex_lock) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[11]">core_sysdep_mutex_unlock</a> from posix_port.o(.text.core_sysdep_mutex_unlock) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[16]">core_sysdep_sem_deinit</a> from posix_port.o(.text.core_sysdep_sem_deinit) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[13]">core_sysdep_sem_init</a> from posix_port.o(.text.core_sysdep_sem_init) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[15]">core_sysdep_sem_release</a> from posix_port.o(.text.core_sysdep_sem_release) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[14]">core_sysdep_sem_take</a> from posix_port.o(.text.core_sysdep_sem_take) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[c]">core_sysdep_sleep</a> from posix_port.o(.text.core_sysdep_sleep) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[d]">core_sysdep_thread_create</a> from posix_port.o(.text.core_sysdep_thread_create) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[e]">core_sysdep_thread_destroy</a> from posix_port.o(.text.core_sysdep_thread_destroy) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[8]">core_sysdep_time</a> from posix_port.o(.text.core_sysdep_time) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[9]">core_usart_send</a> from posix_port.o(.text.core_usart_send) referenced 2 times from posix_port.o(.data.g_aiot_sysdep_portfile)
 <LI><a href="#[f7]">dbg_init</a> from sys_stdio.o(.text.dbg_init) referenced 2 times from sys_stdio.o(.text.sys_stdio_init)
 <LI><a href="#[0]">default_mcu_reset</a> from http_server.o(.text.default_mcu_reset) referenced 2 times from http_server.o(.data.HTTPServer_ReStart)
 <LI><a href="#[1]">default_wdt_reset</a> from http_server.o(.text.default_wdt_reset) referenced 2 times from http_server.o(.data.HTTPServer_WDT_Reset)
 <LI><a href="#[ed]">demo_default_recv_handler</a> from nb_iot_mqtt_handle.o(.text.demo_default_recv_handler) referenced 2 times from nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
 <LI><a href="#[ec]">demo_event_handler</a> from nb_iot_mqtt_handle.o(.text.demo_event_handler) referenced 2 times from nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
 <LI><a href="#[eb]">demo_state_logcb</a> from nb_iot_mqtt_handle.o(.text.demo_state_logcb) referenced 2 times from nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
 <LI><a href="#[ee]">demo_topic_recv_handler</a> from nb_iot_mqtt_handle.o(.text.demo_topic_recv_handler) referenced 2 times from nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
 <LI><a href="#[e4]">final_about_to_die</a> from main.o(.text.final_about_to_die) referenced 2 times from main.o(.text.main_start)
 <LI><a href="#[104]">fputc</a> from hc32_ll_utility.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[d7]">healthmon_loop</a> from healthmon.o(.text.healthmon_loop) referenced 2 times from healthmon.o(.text.healthmon_start)
 <LI><a href="#[d8]">hwrtc_cb</a> from hwrtc.o(.text.hwrtc_cb) referenced 2 times from hwrtc.o(.text.hwrtc_init)
 <LI><a href="#[bd]">isspace</a> from isspace_o.o(.text) referenced 2 times from scanf_char.o(.text)
 <LI><a href="#[d9]">key_control_thread</a> from key_handle.o(.text.key_control_thread) referenced 2 times from key_handle.o(.text.key_process_init)
 <LI><a href="#[e3]">lock_control_thread</a> from lock_rs485_handle.o(.text.lock_control_thread) referenced 2 times from lock_rs485_handle.o(.text.lock_process_init)
 <LI><a href="#[b7]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[f1]">main_start</a> from main.o(.text.main_start) referenced 2 times from main.o(.text.os_init)
 <LI><a href="#[e7]">modbus_control_thread</a> from monitor_board_handle.o(.text.modbus_control_thread) referenced 2 times from monitor_board_handle.o(.text.modbus_process_init)
 <LI><a href="#[e9]">mqtt_control_thread</a> from eth_mqtt_handle.o(.text.mqtt_control_thread) referenced 2 times from eth_mqtt_handle.o(.text.mqtt_process_init)
 <LI><a href="#[e8]">mqtt_subscribe_command</a> from eth_mqtt_handle.o(.text.mqtt_subscribe_command) referenced 2 times from eth_mqtt_handle.o(.text.mqtt_control_thread)
 <LI><a href="#[ef]">nb_mqtt_control_thread</a> from nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread) referenced 2 times from nb_iot_mqtt_handle.o(.text.nb_mqtt_process_init)
 <LI><a href="#[f0]">nb_rx_control_thread</a> from posix_port.o(.text.nb_rx_control_thread) referenced 2 times from posix_port.o(.text.nb_rx_process_init)
 <LI><a href="#[d4]">oled_control_thread</a> from oled_handle.o(.text.oled_control_thread) referenced 2 times from oled_handle.o(.text.display_oled_process_init)
 <LI><a href="#[f8]">prvIdleTask</a> from tasks.o(.text.prvIdleTask) referenced 2 times from tasks.o(.text.vTaskStartScheduler)
 <LI><a href="#[f2]">prvTaskExitError</a> from port.o(.text.prvTaskExitError) referenced 2 times from port.o(.text.pxPortInitialiseStack)
 <LI><a href="#[103]">prvTimerTask</a> from timers.o(.text.prvTimerTask) referenced 2 times from timers.o(.text.xTimerCreateTimerTask)
 <LI><a href="#[1a]">serial_console_flush</a> from console.o(.text.serial_console_flush) referenced 2 times from console.o(.data.serial_console_funcs)
 <LI><a href="#[1b]">serial_console_getchar</a> from console.o(.text.serial_console_getchar) referenced 2 times from console.o(.data.serial_console_funcs)
 <LI><a href="#[19]">serial_console_printf</a> from console.o(.text.serial_console_printf) referenced 2 times from console.o(.data.serial_console_funcs)
 <LI><a href="#[1c]">serial_console_putchar</a> from console.o(.text.serial_console_putchar) referenced 2 times from console.o(.data.serial_console_funcs)
 <LI><a href="#[fb]">w5500_CrisEnter</a> from w5500_dir.o(.text.w5500_CrisEnter) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[fc]">w5500_CrisExit</a> from w5500_dir.o(.text.w5500_CrisExit) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[fa]">w5500_control_thread</a> from eth_handle.o(.text.w5500_control_thread) referenced 2 times from eth_handle.o(.text.w5500_process_init)
 <LI><a href="#[fe]">w5500_cs_deselect</a> from w5500_dir.o(.text.w5500_cs_deselect) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[fd]">w5500_cs_select</a> from w5500_dir.o(.text.w5500_cs_select) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[101]">w5500_read_buff</a> from w5500_dir.o(.text.w5500_read_buff) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[ff]">w5500_read_byte</a> from w5500_dir.o(.text.w5500_read_byte) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[102]">w5500_write_buff</a> from w5500_dir.o(.text.w5500_write_buff) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[100]">w5500_write_byte</a> from w5500_dir.o(.text.w5500_write_byte) referenced 2 times from w5500_dir.o(.text.w5500_register_function)
 <LI><a href="#[6]">wizchip_bus_readdata</a> from wizchip_conf.o(.text.wizchip_bus_readdata) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[7]">wizchip_bus_writedata</a> from wizchip_conf.o(.text.wizchip_bus_writedata) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2]">wizchip_cris_enter</a> from wizchip_conf.o(.text.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[2]">wizchip_cris_enter</a> from wizchip_conf.o(.text.wizchip_cris_enter) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cris_cbfunc)
 <LI><a href="#[3]">wizchip_cris_exit</a> from wizchip_conf.o(.text.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[3]">wizchip_cris_exit</a> from wizchip_conf.o(.text.wizchip_cris_exit) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cris_cbfunc)
 <LI><a href="#[5]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[5]">wizchip_cs_deselect</a> from wizchip_conf.o(.text.wizchip_cs_deselect) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[4]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.data.WIZCHIP)
 <LI><a href="#[4]">wizchip_cs_select</a> from wizchip_conf.o(.text.wizchip_cs_select) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
 <LI><a href="#[f5]">wizchip_spi_readburst</a> from wizchip_conf.o(.text.wizchip_spi_readburst) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[f3]">wizchip_spi_readbyte</a> from wizchip_conf.o(.text.wizchip_spi_readbyte) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
 <LI><a href="#[f6]">wizchip_spi_writeburst</a> from wizchip_conf.o(.text.wizchip_spi_writeburst) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
 <LI><a href="#[f4]">wizchip_spi_writebyte</a> from wizchip_conf.o(.text.wizchip_spi_writebyte) referenced 2 times from wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
 <LI><a href="#[ea]">yield_task</a> from eth_mqtt_handle.o(.text.yield_task) referenced 2 times from eth_mqtt_handle.o(.text.mqtt_process_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b9]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(.text)
</UL>
<P><STRONG><a name="[509]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[113]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[141]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[50a]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[50b]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[50c]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[50d]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[50e]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[1d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>IRQ128_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRQ128_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>IRQ129_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>IRQ130_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>IRQ131_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>IRQ132_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>IRQ133_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>IRQ134_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>IRQ135_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>IRQ136_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>IRQ137_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>IRQ138_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>IRQ139_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>IRQ140_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b4]"></a>IRQ141_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>IRQ142_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[b6]"></a>IRQ143_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_hc32f4a0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[115]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivFraction
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivFraction
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivFraction
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[118]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[bd]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 2]<UL><LI> scanf_char.o(.text)
<LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[50f]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock_tcp_rev_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxFull_IrqCallback
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_update
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_read
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_write
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_read
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_write
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_name_hash
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash_same_device_rw
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_read
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_write
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
</UL>

<P><STRONG><a name="[3a8]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
</UL>

<P><STRONG><a name="[484]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_remove_index_entry
</UL>

<P><STRONG><a name="[510]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[45c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[511]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atgm336h_data_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxFull_IrqCallback
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_finish
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_str
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_init
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_control_thread
</UL>

<P><STRONG><a name="[215]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_finish
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_init
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc32_rtc_get_time_stamp
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_init_new_object
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[2c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[11b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3dd]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
</UL>

<P><STRONG><a name="[241]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_recv_handler
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_http_uri_type
</UL>

<P><STRONG><a name="[344]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_to_str
</UL>

<P><STRONG><a name="[172]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_str
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_register_handler
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_token_streq
</UL>

<P><STRONG><a name="[11c]"></a>strtoll</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoll &rArr; __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[1b3]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_comp
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_userReg_webContent
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
</UL>

<P><STRONG><a name="[207]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_name
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_search_index
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_verify
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
</UL>

<P><STRONG><a name="[34b]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
</UL>

<P><STRONG><a name="[19e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_and_find_handler_by_name
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_token_streq
</UL>

<P><STRONG><a name="[242]"></a>strtok</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_recv_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
</UL>

<P><STRONG><a name="[11e]"></a>vsscanf</STRONG> (Thumb, 40 bytes, Stack size 56 bytes, vsscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
</UL>

<P><STRONG><a name="[120]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_int
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[123]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[124]"></a>strtoull</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = strtoull &rArr; __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[126]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_recv_handler
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>

<P><STRONG><a name="[127]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12b]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
</UL>

<P><STRONG><a name="[12c]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[12d]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_current_value
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_current_value
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_voltage_value
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_current_value
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_voltage_value
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_current_value
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_voltage_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_current_value
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_voltage_value
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_current_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_voltage_value
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_current_value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_voltage_value
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_current_value
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_voltage_value
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_current_value
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_voltage_value
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12e]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivInteger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivFraction
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivInteger
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivFraction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivInteger
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivFraction
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_current_value
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_current_value
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_voltage_value
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_current_value
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_voltage_value
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_current_value
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_voltage_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_current_value
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_voltage_value
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_current_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_voltage_value
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_current_value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_voltage_value
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_current_value
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_voltage_value
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_current_value
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_voltage_value
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
</UL>

<P><STRONG><a name="[130]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivInteger
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivInteger
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivInteger
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_ul2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivInteger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivFraction
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivInteger
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivFraction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivInteger
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivFraction
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[132]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
</UL>

<P><STRONG><a name="[3a9]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[133]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_current_value
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_current_value
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_voltage_value
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_current_value
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_voltage_value
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_current_value
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_voltage_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_current_value
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_voltage_value
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_current_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_voltage_value
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_current_value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_voltage_value
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_current_value
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_voltage_value
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_current_value
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_voltage_value
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivInteger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivFraction
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivInteger
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivFraction
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivInteger
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivFraction
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[512]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[508]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[117]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[513]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[514]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[515]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[137]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[142]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[13d]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[139]"></a>_scanf_really_real</STRONG> (Thumb, 556 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[11f]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>

<P><STRONG><a name="[ba]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[bb]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> strtod.o(.text)
<LI> vsscanf.o(.text)
</UL>
<P><STRONG><a name="[121]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[13e]"></a>__strtod_int</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[11d]"></a>__strtoll</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, __strtoll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __strtoll &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
</UL>

<P><STRONG><a name="[125]"></a>__strtoull</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, __strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __strtoull &rArr; _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
</UL>

<P><STRONG><a name="[516]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[517]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[129]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[140]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[505]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[114]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[518]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[13b]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[13f]"></a>_strtoull</STRONG> (Thumb, 194 bytes, Stack size 48 bytes, _strtoull.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _strtoull
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
</UL>

<P><STRONG><a name="[519]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[51a]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[26b]"></a>AOS_SetTriggerEventSrc</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc32_ll_aos.o(.text.AOS_SetTriggerEventSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = AOS_SetTriggerEventSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
</UL>

<P><STRONG><a name="[143]"></a>ATOI</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, http_parser.o(.text.ATOI))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = ATOI &rArr; C2D
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2D
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[14d]"></a>CLK_GetStableStatus</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, hc32_ll_clk.o(.text.CLK_GetStableStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>

<P><STRONG><a name="[145]"></a>CLK_PLLCmd</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_PLLCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
</UL>

<P><STRONG><a name="[147]"></a>CLK_PLLInit</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.CLK_PLLInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[4d0]"></a>CLK_PLLStructInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_PLLStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_PLLStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[148]"></a>CLK_SetClockDiv</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_SetClockDiv &rArr; SetSysClockDiv &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[14b]"></a>CLK_SetSysClockSrc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CLK_SetSysClockSrc &rArr; SetSysClockSrc &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[14e]"></a>CLK_Xtal32Cmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_Xtal32Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_Xtal32Cmd &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Init
</UL>

<P><STRONG><a name="[150]"></a>CLK_Xtal32Init</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_Xtal32Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_Xtal32Init &rArr; CLK_Xtal32Cmd &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal32_clock_init
</UL>

<P><STRONG><a name="[151]"></a>CLK_XtalCmd</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_XtalCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitStable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
</UL>

<P><STRONG><a name="[152]"></a>CLK_XtalInit</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, hc32_ll_clk.o(.text.CLK_XtalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CLK_XtalInit &rArr; CLK_XtalCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[4cf]"></a>CLK_XtalStructInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_XtalStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_XtalStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[154]"></a>CRC_DeInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll_crc.o(.text.CRC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Init
</UL>

<P><STRONG><a name="[153]"></a>CRC_Init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, hc32_ll_crc.o(.text.CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_init
</UL>

<P><STRONG><a name="[109]"></a>DDL_AssertHandler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, hc32_ll_utility.o(.text.DDL_AssertHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DDL_AssertHandler &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>

<P><STRONG><a name="[159]"></a>DDL_ConsoleOutputChar</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hc32_ll_utility.o(.text.DDL_ConsoleOutputChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DDL_ConsoleOutputChar
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrintDevice
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GetPrintTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console_putchar
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console_printf
</UL>

<P><STRONG><a name="[24f]"></a>DDL_DelayMS</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, hc32_ll_utility.o(.text.DDL_DelayMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal32_clock_init
</UL>

<P><STRONG><a name="[246]"></a>DDL_DelayUS</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, hc32_ll_utility.o(.text.DDL_DelayUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_bit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_Check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
</UL>

<P><STRONG><a name="[10e]"></a>DHCP_time_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w5500_dhcp.o(.text.DHCP_time_handler), UNUSED, KEPT)

<P><STRONG><a name="[10f]"></a>DNS_time_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, w5500_dns.o(.text.DNS_time_handler), UNUSED, KEPT)

<P><STRONG><a name="[4f1]"></a>EFM_GetUID</STRONG> (Thumb, 58 bytes, Stack size 4 bytes, hc32_ll_efm.o(.text.EFM_GetUID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EFM_GetUID
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_mac_conf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4d2]"></a>EFM_SetWaitCycle</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, hc32_ll_efm.o(.text.EFM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EFM_SetWaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[160]"></a>EXTINT_ClearExtIntStatus</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, hc32_ll_interrupts.o(.text.EXTINT_ClearExtIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTINT_ClearExtIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_POWER_OFF_IrqCallback
</UL>

<P><STRONG><a name="[15c]"></a>EXTINT_GetExtIntStatus</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hc32_ll_interrupts.o(.text.EXTINT_GetExtIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTINT_GetExtIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_POWER_OFF_IrqCallback
</UL>

<P><STRONG><a name="[291]"></a>EXTINT_Init</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, hc32_ll_interrupts.o(.text.EXTINT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTINT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[290]"></a>EXTINT_StructInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.EXTINT_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTINT_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[26a]"></a>FCG_Fcg0PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_fcg.o(.text.FCG_Fcg0PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCG_Fcg0PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_init
</UL>

<P><STRONG><a name="[1d1]"></a>FCG_Fcg1PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_fcg.o(.text.FCG_Fcg1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[26c]"></a>FCG_Fcg2PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_fcg.o(.text.FCG_Fcg2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCG_Fcg2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
</UL>

<P><STRONG><a name="[271]"></a>FCG_Fcg3PeriphClockCmd</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hc32_ll_fcg.o(.text.FCG_Fcg3PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FCG_Fcg3PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[161]"></a>FLASH_Erase</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, qspi_flash.o(.text.FLASH_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = FLASH_Erase &rArr; QSPI_FLASH_Erase_Block64K &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block64K
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block32K
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_EraseSector
</UL>
<BR>[Called By]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_erase
</UL>

<P><STRONG><a name="[33d]"></a>FLASH_GetConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qspi_flash.o(.text.FLASH_GetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[165]"></a>FLASH_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, qspi_flash.o(.text.FLASH_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FLASH_SetConfig &rArr; FLASH_GetConfigFromID
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetConfigFromID
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[167]"></a>FLASH_Write</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, qspi_flash.o(.text.FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = FLASH_Write &rArr; QSPI_FLASH_Write &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
</UL>

<P><STRONG><a name="[c1]"></a>FreeRTOS_disconnect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.FreeRTOS_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FreeRTOS_disconnect &rArr; disconnect &rArr; close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_to_freertos.o(.text.NetworkInit)
</UL>
<P><STRONG><a name="[bf]"></a>FreeRTOS_read</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, eth_to_freertos.o(.text.FreeRTOS_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FreeRTOS_read &rArr; recv &rArr; getSn_RX_RSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_to_freertos.o(.text.NetworkInit)
</UL>
<P><STRONG><a name="[c0]"></a>FreeRTOS_write</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, eth_to_freertos.o(.text.FreeRTOS_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = FreeRTOS_write &rArr; send &rArr; getSn_TX_FSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_to_freertos.o(.text.NetworkInit)
</UL>
<P><STRONG><a name="[4ce]"></a>GPIO_AnalogCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_AnalogCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_AnalogCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[28f]"></a>GPIO_ExIntCmd</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, hc32_ll_gpio.o(.text.GPIO_ExIntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_ExIntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[1cf]"></a>GPIO_Init</STRONG> (Thumb, 236 bytes, Stack size 28 bytes, hc32_ll_gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_io_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_in_io_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_io_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_io_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_in
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_out
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_io_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_hard
</UL>

<P><STRONG><a name="[15d]"></a>GPIO_ReadInputPins</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, hc32_ll_gpio.o(.text.GPIO_ReadInputPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_spd_sensor
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_sensor
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_water_sensor
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smoke_sensor
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_POWER_OFF_IrqCallback
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_bit
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_Check
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownRST
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownOk
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownClr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownDown
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownUp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKeyDownMenu
</UL>

<P><STRONG><a name="[3b4]"></a>GPIO_ReadInputPort</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, hc32_ll_gpio.o(.text.GPIO_ReadInputPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_ReadInputPort
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[24e]"></a>GPIO_ResetPins</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32_ll_gpio.o(.text.GPIO_ResetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_net_off
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_off
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_en_off
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_cs_select
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data_all
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_reset
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_power_off
</UL>

<P><STRONG><a name="[28e]"></a>GPIO_SetDebugPort</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, hc32_ll_gpio.o(.text.GPIO_SetDebugPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_SetDebugPort
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[1d0]"></a>GPIO_SetFunc</STRONG> (Thumb, 102 bytes, Stack size 12 bytes, hc32_ll_gpio.o(.text.GPIO_SetFunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_io_init
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_io_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[248]"></a>GPIO_SetPins</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32_ll_gpio.o(.text.GPIO_SetPins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_net_on
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_on
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_en_on
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_cs_deselect
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data_all
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_reset
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_power_on
</UL>

<P><STRONG><a name="[4d3]"></a>GPIO_SetReadWaitCycle</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, hc32_ll_gpio.o(.text.GPIO_SetReadWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_SetReadWaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[1ce]"></a>GPIO_StructInit</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, hc32_ll_gpio.o(.text.GPIO_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_io_init
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_in_io_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_io_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_io_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_in
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_out
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_io_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_hard
</UL>

<P><STRONG><a name="[40e]"></a>GPIO_TogglePins</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hc32_ll_gpio.o(.text.GPIO_TogglePins))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_TogglePins
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[25d]"></a>INTC_IrqSignIn</STRONG> (Thumb, 222 bytes, Stack size 12 bytes, hc32_ll_interrupts.o(.text.INTC_IrqSignIn))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_irq_handler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_irq_handler
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_set_cb
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_irq_handler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_irq_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_irq_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_irq_handler
</UL>

<P><STRONG><a name="[27]"></a>IRQ000_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ000_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ000_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>IRQ001_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ001_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ001_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>IRQ002_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ002_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ002_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IRQ003_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ003_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ003_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>IRQ004_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ004_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ004_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IRQ005_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ005_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ005_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>IRQ006_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ006_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ006_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>IRQ007_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ007_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ007_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>IRQ008_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ008_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ008_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>IRQ009_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ009_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ009_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>IRQ010_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ010_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ010_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>IRQ011_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ011_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ011_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>IRQ012_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ012_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ012_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>IRQ013_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ013_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ013_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>IRQ014_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ014_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ014_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>IRQ015_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ015_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ015_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>IRQ016_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ016_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ016_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>IRQ017_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ017_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ017_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IRQ018_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ018_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ018_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>IRQ019_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ019_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ019_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>IRQ020_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ020_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ020_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>IRQ021_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ021_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ021_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>IRQ022_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ022_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ022_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>IRQ023_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ023_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ023_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>IRQ024_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ024_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ024_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>IRQ025_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ025_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ025_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>IRQ026_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ026_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ026_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>IRQ027_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ027_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ027_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>IRQ028_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ028_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ028_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>IRQ029_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ029_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ029_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>IRQ030_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ030_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ030_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>IRQ031_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ031_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ031_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>IRQ032_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ032_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ032_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>IRQ033_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ033_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ033_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>IRQ034_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ034_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ034_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>IRQ035_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ035_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ035_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>IRQ036_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ036_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ036_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>IRQ037_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ037_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ037_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>IRQ038_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ038_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ038_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>IRQ039_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ039_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ039_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>IRQ040_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ040_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ040_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>IRQ041_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ041_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ041_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>IRQ042_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ042_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ042_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>IRQ043_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ043_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ043_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>IRQ044_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ044_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ044_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>IRQ045_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ045_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ045_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>IRQ046_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ046_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ046_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>IRQ047_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ047_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ047_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>IRQ048_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ048_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ048_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>IRQ049_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ049_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ049_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>IRQ050_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ050_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ050_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IRQ051_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ051_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ051_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>IRQ052_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ052_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ052_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>IRQ053_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ053_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ053_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>IRQ054_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ054_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ054_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>IRQ055_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ055_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ055_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>IRQ056_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ056_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ056_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>IRQ057_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ057_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ057_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>IRQ058_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ058_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ058_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IRQ059_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ059_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ059_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>IRQ060_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ060_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ060_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>IRQ061_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ061_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ061_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>IRQ062_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ062_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ062_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>IRQ063_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ063_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ063_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>IRQ064_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ064_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ064_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>IRQ065_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ065_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ065_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>IRQ066_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ066_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ066_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>IRQ067_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ067_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ067_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>IRQ068_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ068_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ068_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>IRQ069_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ069_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ069_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>IRQ070_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ070_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ070_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>IRQ071_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ071_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ071_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>IRQ072_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ072_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ072_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>IRQ073_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ073_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ073_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>IRQ074_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ074_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ074_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>IRQ075_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ075_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ075_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>IRQ076_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ076_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ076_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>IRQ077_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ077_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ077_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>IRQ078_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ078_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ078_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>IRQ079_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ079_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ079_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>IRQ080_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ080_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ080_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>IRQ081_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ081_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ081_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>IRQ082_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ082_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ082_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>IRQ083_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ083_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ083_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>IRQ084_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ084_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ084_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>IRQ085_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ085_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ085_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>IRQ086_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ086_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ086_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>IRQ087_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ087_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ087_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>IRQ088_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ088_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ088_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>IRQ089_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ089_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ089_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>IRQ090_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ090_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ090_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>IRQ091_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ091_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ091_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>IRQ092_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ092_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ092_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>IRQ093_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ093_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ093_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>IRQ094_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ094_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ094_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>IRQ095_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ095_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ095_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>IRQ096_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ096_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ096_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>IRQ097_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ097_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ097_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>IRQ098_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ098_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ098_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>IRQ099_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ099_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ099_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>IRQ100_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ100_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ100_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>IRQ101_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ101_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ101_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>IRQ102_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ102_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ102_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>IRQ103_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ103_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ103_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>IRQ104_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ104_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ104_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>IRQ105_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ105_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ105_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>IRQ106_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ106_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ106_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>IRQ107_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ107_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ107_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>IRQ108_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ108_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ108_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>IRQ109_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ109_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ109_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>IRQ110_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ110_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ110_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>IRQ111_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ111_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ111_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>IRQ112_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ112_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ112_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>IRQ113_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ113_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ113_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>IRQ114_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ114_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ114_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>IRQ115_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ115_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ115_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>IRQ116_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ116_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ116_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>IRQ117_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ117_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ117_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>IRQ118_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ118_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ118_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>IRQ119_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ119_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ119_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>IRQ120_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ120_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ120_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>IRQ121_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ121_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ121_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>IRQ122_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ122_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ122_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>IRQ123_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ123_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ123_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>IRQ124_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ124_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ124_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>IRQ125_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ125_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ125_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>IRQ126_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ126_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ126_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>IRQ127_Handler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hc32_ll_interrupts.o(.text.IRQ127_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IRQ127_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[173]"></a>LL_PERIPH_WE</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hc32_ll.o(.text.LL_PERIPH_WE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_PERIPH_WE &rArr; PWC_REG_Unlock
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Unlock
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_REG_Unlock
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_FCG0_REG_Unlock
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_REG_Unlock
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_in
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_out
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_set_timeout
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_init
</UL>

<P><STRONG><a name="[179]"></a>LL_PERIPH_WP</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, hc32_ll.o(.text.LL_PERIPH_WP))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_PERIPH_WP &rArr; PWC_REG_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_REG_Lock
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_REG_Lock
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_FCG0_REG_Lock
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_REG_Lock
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_in
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_out
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_set_timeout
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_init
</UL>

<P><STRONG><a name="[17f]"></a>LL_PrintfInit</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, hc32_ll_utility.o(.text.LL_PrintfInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_PrintfInit &rArr; LL_SetPrintTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetPrintTimeout
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetPrintDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stdio_init
</UL>

<P><STRONG><a name="[186]"></a>MQTTCleanSession</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, eth_to_mqtt.o(.text.MQTTCleanSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MQTTCleanSession
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
</UL>

<P><STRONG><a name="[182]"></a>MQTTClientInit</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, eth_to_mqtt.o(.text.MQTTClientInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = MQTTClientInit &rArr; MutexInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[185]"></a>MQTTCloseSession</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, eth_to_mqtt.o(.text.MQTTCloseSession))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTCloseSession &rArr; MQTTCleanSession
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCleanSession
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[187]"></a>MQTTConnect</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, eth_to_mqtt.o(.text.MQTTConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = MQTTConnect &rArr; MQTTConnectWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[188]"></a>MQTTConnectWithResults</STRONG> (Thumb, 260 bytes, Stack size 136 bytes, eth_to_mqtt.o(.text.MQTTConnectWithResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = MQTTConnectWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
</UL>

<P><STRONG><a name="[192]"></a>MQTTDeserialize_ack</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, mqttdeserializepublish.o(.text.MQTTDeserialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[190]"></a>MQTTDeserialize_connack</STRONG> (Thumb, 160 bytes, Stack size 56 bytes, mqttconnectclient.o(.text.MQTTDeserialize_connack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTDeserialize_connack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[196]"></a>MQTTDeserialize_publish</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, mqttdeserializepublish.o(.text.MQTTDeserialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_publish &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[198]"></a>MQTTDeserialize_suback</STRONG> (Thumb, 196 bytes, Stack size 48 bytes, mqttsubscribeclient.o(.text.MQTTDeserialize_suback))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MQTTDeserialize_suback &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[199]"></a>MQTTDeserialize_unsuback</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, mqttunsubscribeclient.o(.text.MQTTDeserialize_unsuback))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MQTTDeserialize_unsuback &rArr; MQTTDeserialize_ack &rArr; MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>

<P><STRONG><a name="[19a]"></a>MQTTDisconnect</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, eth_to_mqtt.o(.text.MQTTDisconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MQTTDisconnect &rArr; MutexUnlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[19c]"></a>MQTTPacket_decode</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, mqttpacket.o(.text.MQTTPacket_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decodeBuf
</UL>

<P><STRONG><a name="[194]"></a>MQTTPacket_decodeBuf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, mqttpacket.o(.text.MQTTPacket_decodeBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTPacket_decodeBuf &rArr; MQTTPacket_decode
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[1a4]"></a>MQTTPacket_encode</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mqttpacket.o(.text.MQTTPacket_encode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MQTTPacket_encode
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[19d]"></a>MQTTPacket_equals</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, mqttpacket.o(.text.MQTTPacket_equals))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[1a7]"></a>MQTTPacket_len</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, mqttpacket.o(.text.MQTTPacket_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MQTTPacket_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[19f]"></a>MQTTPublish</STRONG> (Thumb, 390 bytes, Stack size 112 bytes, eth_to_mqtt.o(.text.MQTTPublish))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
</UL>

<P><STRONG><a name="[1a2]"></a>MQTTSerialize_ack</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, mqttserializepublish.o(.text.MQTTSerialize_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_ack &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[18d]"></a>MQTTSerialize_connect</STRONG> (Thumb, 516 bytes, Stack size 56 bytes, mqttconnectclient.o(.text.MQTTSerialize_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MQTTSerialize_connect &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[1a6]"></a>MQTTSerialize_connectLength</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, mqttconnectclient.o(.text.MQTTSerialize_connectLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_connectLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[19b]"></a>MQTTSerialize_disconnect</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mqttconnectclient.o(.text.MQTTSerialize_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTSerialize_disconnect &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
</UL>

<P><STRONG><a name="[1ac]"></a>MQTTSerialize_pingreq</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, mqttconnectclient.o(.text.MQTTSerialize_pingreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MQTTSerialize_pingreq &rArr; MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[1a1]"></a>MQTTSerialize_publish</STRONG> (Thumb, 294 bytes, Stack size 80 bytes, mqttserializepublish.o(.text.MQTTSerialize_publish))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MQTTSerialize_publish &rArr; MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
</UL>

<P><STRONG><a name="[1ad]"></a>MQTTSerialize_publishLength</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mqttserializepublish.o(.text.MQTTSerialize_publishLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_publishLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
</UL>

<P><STRONG><a name="[1af]"></a>MQTTSerialize_subscribe</STRONG> (Thumb, 264 bytes, Stack size 56 bytes, mqttsubscribeclient.o(.text.MQTTSerialize_subscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MQTTSerialize_subscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[1b0]"></a>MQTTSerialize_subscribeLength</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mqttsubscribeclient.o(.text.MQTTSerialize_subscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_subscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
</UL>

<P><STRONG><a name="[1b1]"></a>MQTTSerialize_unsubscribe</STRONG> (Thumb, 248 bytes, Stack size 48 bytes, mqttunsubscribeclient.o(.text.MQTTSerialize_unsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MQTTSerialize_unsubscribe &rArr; writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_len
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
</UL>

<P><STRONG><a name="[1b2]"></a>MQTTSerialize_unsubscribeLength</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mqttunsubscribeclient.o(.text.MQTTSerialize_unsubscribeLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MQTTSerialize_unsubscribeLength &rArr; MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTstrlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
</UL>

<P><STRONG><a name="[1ab]"></a>MQTTSerialize_zero</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, mqttconnectclient.o(.text.MQTTSerialize_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MQTTSerialize_zero &rArr; MQTTPacket_encode
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_disconnect
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
</UL>

<P><STRONG><a name="[108]"></a>MQTTSetMessageHandler</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, eth_to_mqtt.o(.text.MQTTSetMessageHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MQTTSetMessageHandler &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[1b4]"></a>MQTTSubscribe</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, eth_to_mqtt.o(.text.MQTTSubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MQTTSubscribe &rArr; MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[1b5]"></a>MQTTSubscribeWithResults</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, eth_to_mqtt.o(.text.MQTTSubscribeWithResults))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = MQTTSubscribeWithResults &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
</UL>

<P><STRONG><a name="[1b6]"></a>MQTTUnsubscribe</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, eth_to_mqtt.o(.text.MQTTUnsubscribe))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MQTTUnsubscribe &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_unsuback
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSetMessageHandler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNextPacketId
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[1b7]"></a>MQTTYield</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, eth_to_mqtt.o(.text.MQTTYield))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = MQTTYield &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[1aa]"></a>MQTTstrlen</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, mqttpacket.o(.text.MQTTstrlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MQTTstrlen
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribeLength
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribeLength
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publishLength
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connectLength
</UL>

<P><STRONG><a name="[184]"></a>MutexInit</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.MutexInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MutexInit &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
</UL>

<P><STRONG><a name="[18a]"></a>MutexLock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.MutexLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MutexLock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[191]"></a>MutexUnlock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.MutexUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MutexUnlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[1bd]"></a>NetworkConnect</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, eth_to_freertos.o(.text.NetworkConnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NetworkConnect &rArr; socket &rArr; close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3e9]"></a>NetworkInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, eth_to_freertos.o(.text.NetworkInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NetworkInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[4c5]"></a>PWC_VBAT_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll_pwc.o(.text.PWC_VBAT_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[25]"></a>PendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, port.o(.text.PendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1c4]"></a>QSPI_EnterDirectCommMode</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, hc32_ll_qspi.o(.text.QSPI_EnterDirectCommMode))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>

<P><STRONG><a name="[1c7]"></a>QSPI_ExitDirectCommMode</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hc32_ll_qspi.o(.text.QSPI_ExitDirectCommMode))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>

<P><STRONG><a name="[164]"></a>QSPI_FLASH_EraseSector</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_EraseSector))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = QSPI_FLASH_EraseSector &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WordToByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[163]"></a>QSPI_FLASH_Erase_Block32K</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_Erase_Block32K))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = QSPI_FLASH_Erase_Block32K &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WordToByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[162]"></a>QSPI_FLASH_Erase_Block64K</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_Erase_Block64K))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = QSPI_FLASH_Erase_Block64K &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WordToByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
</UL>

<P><STRONG><a name="[1ca]"></a>QSPI_FLASH_GetUniqueID</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, qspi_flash.o(.text.QSPI_FLASH_GetUniqueID))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = QSPI_FLASH_GetUniqueID &rArr; QSPI_FLASH_ReadInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_qspi_read_uniqid
</UL>

<P><STRONG><a name="[1cc]"></a>QSPI_FLASH_Getjedecid</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, qspi_flash.o(.text.QSPI_FLASH_Getjedecid))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = QSPI_FLASH_Getjedecid &rArr; QSPI_FLASH_ReadInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_qspi_read_jedecid
</UL>

<P><STRONG><a name="[1cd]"></a>QSPI_FLASH_Init</STRONG> (Thumb, 244 bytes, Stack size 120 bytes, qspi_flash.o(.text.QSPI_FLASH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = QSPI_FLASH_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_StructInit
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_Init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[1d4]"></a>QSPI_FLASH_Read</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QSPI_FLASH_Read &rArr; QSPI_XipModeCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_XipModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_read
</UL>

<P><STRONG><a name="[168]"></a>QSPI_FLASH_Write</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, qspi_flash.o(.text.QSPI_FLASH_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = QSPI_FLASH_Write &rArr; QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WordToByte
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
</UL>

<P><STRONG><a name="[1d3]"></a>QSPI_Init</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, hc32_ll_qspi.o(.text.QSPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = QSPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[1d2]"></a>QSPI_StructInit</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, hc32_ll_qspi.o(.text.QSPI_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = QSPI_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
</UL>

<P><STRONG><a name="[1d5]"></a>QSPI_XipModeCmd</STRONG> (Thumb, 64 bytes, Stack size 4 bytes, hc32_ll_qspi.o(.text.QSPI_XipModeCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QSPI_XipModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Read
</UL>

<P><STRONG><a name="[386]"></a>RTC_ClearStatus</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_cb
</UL>

<P><STRONG><a name="[4c3]"></a>RTC_Cmd</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, hc32_ll_rtc.o(.text.RTC_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_start
</UL>

<P><STRONG><a name="[4c6]"></a>RTC_DeInit</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1d7]"></a>RTC_EnterRwMode</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_EnterRwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[1d8]"></a>RTC_ExitRwMode</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_ExitRwMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_ExitRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>

<P><STRONG><a name="[4c4]"></a>RTC_GetCounterState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, hc32_ll_rtc.o(.text.RTC_GetCounterState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_GetCounterState
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1d6]"></a>RTC_GetDate</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, hc32_ll_rtc.o(.text.RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetDate &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc32_rtc_get_time_stamp
</UL>

<P><STRONG><a name="[1d9]"></a>RTC_GetTime</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, hc32_ll_rtc.o(.text.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_GetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc32_rtc_get_time_stamp
</UL>

<P><STRONG><a name="[4c8]"></a>RTC_Init</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[4bf]"></a>RTC_IntCmd</STRONG> (Thumb, 118 bytes, Stack size 12 bytes, hc32_ll_rtc.o(.text.RTC_IntCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_IntCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[1da]"></a>RTC_SetDate</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, hc32_ll_rtc.o(.text.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetDate &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[1db]"></a>RTC_SetTime</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, hc32_ll_rtc.o(.text.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitRwMode
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterRwMode
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[4c7]"></a>RTC_StructInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hc32_ll_rtc.o(.text.RTC_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[421]"></a>SPI_Cmd</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, hc32_ll_spi.o(.text.SPI_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[41e]"></a>SPI_DelayStructInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hc32_ll_spi.o(.text.SPI_DelayStructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_DelayStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[420]"></a>SPI_DelayTimeConfig</STRONG> (Thumb, 210 bytes, Stack size 12 bytes, hc32_ll_spi.o(.text.SPI_DelayTimeConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_DelayTimeConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[41f]"></a>SPI_Init</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, hc32_ll_spi.o(.text.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[1dc]"></a>SPI_Receive</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, hc32_ll_spi.o(.text.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPI_Receive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_buff
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_read_byte
</UL>

<P><STRONG><a name="[41d]"></a>SPI_StructInit</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, hc32_ll_spi.o(.text.SPI_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
</UL>

<P><STRONG><a name="[1de]"></a>SPI_Trans</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, hc32_ll_spi.o(.text.SPI_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_write_buff
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_write_byte
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_write
</UL>

<P><STRONG><a name="[4d1]"></a>SRAM_SetWaitCycle</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, hc32_ll_sram.o(.text.SRAM_SetWaitCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SRAM_SetWaitCycle
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
</UL>

<P><STRONG><a name="[23]"></a>SVC_Handler</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, port.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[4f0]"></a>SWDT_FeedDog</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32_ll_swdt.o(.text.SWDT_FeedDog))
<BR><BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_start
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_strobe
</UL>

<P><STRONG><a name="[4ef]"></a>SWDT_Init</STRONG> (Thumb, 92 bytes, Stack size 12 bytes, hc32_ll_swdt.o(.text.SWDT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_set_timeout
</UL>

<P><STRONG><a name="[1e1]"></a>SetSerailNumber</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, camera_com_pro.o(.text.SetSerailNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSerailNumber &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reset
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_photo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_len
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start_photo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_photoBuf_cls
</UL>

<P><STRONG><a name="[26]"></a>SysTick_Handler</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, port.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IrqHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(RESET)
</UL>
<P><STRONG><a name="[1e9]"></a>SysTick_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.SysTick_IncTick), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IrqHandler
</UL>

<P><STRONG><a name="[1e8]"></a>SysTick_Init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, hc32_ll_utility.o(.text.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Init &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[107]"></a>SysTick_IrqHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, main.o(.text.SysTick_IrqHandler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SysTick_IrqHandler &rArr; SysTick_Handler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_IncTick
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[14a]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, system_hc32f4a0.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b8]"></a>SystemInit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system_hc32f4a0.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SystemInit &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_hc32f4a0.o(.text)
</UL>
<P><STRONG><a name="[26f]"></a>TMR0_HWClearCondCmd</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hc32_ll_tmr0.o(.text.TMR0_HWClearCondCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_HWClearCondCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
</UL>

<P><STRONG><a name="[26e]"></a>TMR0_HWStartCondCmd</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, hc32_ll_tmr0.o(.text.TMR0_HWStartCondCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR0_HWStartCondCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
</UL>

<P><STRONG><a name="[26d]"></a>TMR0_Init</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, hc32_ll_tmr0.o(.text.TMR0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
</UL>

<P><STRONG><a name="[1f2]"></a>TMR0_Stop</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, hc32_ll_tmr0.o(.text.TMR0_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR0_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxTimeout_IrqCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxTimeout_IrqCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_USART7_RxTimeout_IrqCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxTimeout_IrqCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTimeout_IrqCallback
</UL>

<P><STRONG><a name="[18c]"></a>TimerCountdown</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.TimerCountdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TimerCountdown &rArr; TimerCountdownMS &rArr; vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[18b]"></a>TimerCountdownMS</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.TimerCountdownMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimerCountdownMS &rArr; vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
</UL>

<P><STRONG><a name="[183]"></a>TimerInit</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, eth_to_freertos.o(.text.TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TimerInit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
</UL>

<P><STRONG><a name="[1b9]"></a>TimerIsExpired</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.TimerIsExpired))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[1ea]"></a>TimerLeftMS</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, eth_to_freertos.o(.text.TimerLeftMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TimerLeftMS &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>

<P><STRONG><a name="[1ef]"></a>USART_ClearStatus</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, hc32_ll_usart.o(.text.USART_ClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxTimeout_IrqCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxError_IrqCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxError_IrqCallback
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxTimeout_IrqCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxError_IrqCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxError_IrqCallback
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_USART7_RxTimeout_IrqCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_USART7_RxError_IrqCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxTimeout_IrqCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxError_IrqCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTimeout_IrqCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxError_IrqCallback
</UL>

<P><STRONG><a name="[272]"></a>USART_DeInit</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, hc32_ll_usart.o(.text.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
</UL>

<P><STRONG><a name="[274]"></a>USART_FuncCmd</STRONG> (Thumb, 118 bytes, Stack size 20 bytes, hc32_ll_usart.o(.text.USART_FuncCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_FuncCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[1f6]"></a>USART_GetClockDiv</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, hc32_ll_usart.o(.text.USART_GetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_GetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockDiv
</UL>

<P><STRONG><a name="[1fe]"></a>USART_GetStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hc32_ll_usart.o(.text.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_off_autoeclosing
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_autoeclosing
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_autoeclosing
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_autoeclosing
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slave_data
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lock_data
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_send_data
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_send_data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_send_data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_send_data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coil_send_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_data
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WaitStatus
</UL>

<P><STRONG><a name="[1ee]"></a>USART_ReadData</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, hc32_ll_usart.o(.text.USART_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxFull_IrqCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART7_RxError_IrqCallback
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxFull_IrqCallback
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxError_IrqCallback
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxFull_IrqCallback
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_RxError_IrqCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxFull_IrqCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_RxError_IrqCallback
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_USART7_RxFull_IrqCallback
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_USART7_RxError_IrqCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxFull_IrqCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxError_IrqCallback
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxFull_IrqCallback
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxError_IrqCallback
</UL>

<P><STRONG><a name="[1f9]"></a>USART_SetBaudrate</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, hc32_ll_usart.o(.text.USART_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDiv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDiv
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDiv
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[329]"></a>USART_SetClockDiv</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hc32_ll_usart.o(.text.USART_SetClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_SetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[1fa]"></a>USART_UART_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.USART_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[273]"></a>USART_UART_StructInit</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, hc32_ll_usart.o(.text.USART_UART_StructInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dbg_init
</UL>

<P><STRONG><a name="[1fb]"></a>USART_UART_Trans</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.USART_UART_Trans))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slave_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_slave_relay
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_slave_driver_id
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>

<P><STRONG><a name="[1fd]"></a>USART_WriteData</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, hc32_ll_usart.o(.text.USART_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_off_autoeclosing
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_autoeclosing
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_autoeclosing
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_autoeclosing
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slave_data
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lock_data
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_send_data
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_send_data
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_send_data
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_send_data
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coil_send_data
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_data
</UL>

<P><STRONG><a name="[16c]"></a>WIZCHIP_READ</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, w5500.o(.text.WIZCHIP_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_write
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_disconnect
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[37a]"></a>WIZCHIP_READ_BUF</STRONG> (Thumb, 230 bytes, Stack size 40 bytes, w5500.o(.text.WIZCHIP_READ_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
</UL>

<P><STRONG><a name="[2b6]"></a>WIZCHIP_WRITE</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, w5500.o(.text.WIZCHIP_WRITE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_disconnect
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[2db]"></a>WIZCHIP_WRITE_BUF</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, w5500.o(.text.WIZCHIP_WRITE_BUF))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setsockopt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
</UL>

<P><STRONG><a name="[1c1]"></a>_sys_assert</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sys_assert.o(.text._sys_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _sys_assert &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical_section
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSM_List_Init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSM_List_AddTail
</UL>

<P><STRONG><a name="[220]"></a>add_psm_entry_int</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, project_psm_control.o(.text.add_psm_entry_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = add_psm_entry_int &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_slave_conf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
</UL>

<P><STRONG><a name="[223]"></a>add_psm_entry_str</STRONG> (Thumb, 48 bytes, Stack size 160 bytes, project_psm_control.o(.text.add_psm_entry_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1320<LI>Call Chain = add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_slave_conf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_mac_conf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
</UL>

<P><STRONG><a name="[226]"></a>aiot_at_hal_recv_handle</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aiot_module_api.o(.text.aiot_at_hal_recv_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = aiot_at_hal_recv_handle &rArr; core_ringbuf_write &rArr; core_ringbuf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_write
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_control_thread
</UL>

<P><STRONG><a name="[229]"></a>aiot_module_deinit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, aiot_module_api.o(.text.aiot_module_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = aiot_module_deinit &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[22b]"></a>aiot_module_handshake</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, aiot_module_api.o(.text.aiot_module_handshake))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aiot_module_handshake &rArr; at_client_obj_wait_connect &rArr; at_create_resp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_software_reboot
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[230]"></a>aiot_module_init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, aiot_module_api.o(.text.aiot_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = aiot_module_init &rArr; at_client_init &rArr; at_client_para_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_power_off
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_power_on
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[22d]"></a>aiot_module_software_reboot</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, aiot_module_api.o(.text.aiot_module_software_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = aiot_module_software_reboot &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
</UL>

<P><STRONG><a name="[236]"></a>aiot_mqtt_connect</STRONG> (Thumb, 290 bytes, Stack size 88 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = aiot_mqtt_connect &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_INIT_LIST_HEAD
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[23a]"></a>aiot_mqtt_disconnect</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = aiot_mqtt_disconnect &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_destroy
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[18]"></a>aiot_mqtt_event_handler</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = aiot_mqtt_event_handler &rArr; at_req_parse_args &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aiot_module_api.o(.data.g_urc_table)
</UL>
<P><STRONG><a name="[23e]"></a>aiot_mqtt_pubhex</STRONG> (Thumb, 170 bytes, Stack size 48 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_pubhex))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = aiot_mqtt_pubhex &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[23f]"></a>aiot_mqtt_query_state</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_query_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aiot_mqtt_query_state &rArr; at_resp_parse_line_args &rArr; at_resp_get_line &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[17]"></a>aiot_mqtt_recv_handler</STRONG> (Thumb, 704 bytes, Stack size 80 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = aiot_mqtt_recv_handler &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aiot_module_api.o(.data.g_urc_table)
</UL>
<P><STRONG><a name="[243]"></a>aiot_mqtt_sub</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, aiot_mqtt_api.o(.text.aiot_mqtt_sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = aiot_mqtt_sub &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[3fa]"></a>aiot_state_set_logcb</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, aiot_state_api.o(.text.aiot_state_set_logcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aiot_state_set_logcb
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[206]"></a>aiot_sysdep_get_portfile</STRONG> (Thumb, 280 bytes, Stack size 4 bytes, core_sysdep.o(.text.aiot_sysdep_get_portfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_deinit
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
</UL>

<P><STRONG><a name="[3f9]"></a>aiot_sysdep_set_portfile</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, core_sysdep.o(.text.aiot_sysdep_set_portfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = aiot_sysdep_set_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[244]"></a>am2301a_Check</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, am2301a_dir.o(.text.am2301a_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = am2301a_Check &rArr; am2301a_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_in
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
</UL>

<P><STRONG><a name="[247]"></a>am2301a_init</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, am2301a_dir.o(.text.am2301a_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = am2301a_init &rArr; am2301a_Check &rArr; am2301a_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_Check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[24a]"></a>am2301a_read_bit</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, am2301a_dir.o(.text.am2301a_read_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = am2301a_read_bit &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_byte
</UL>

<P><STRONG><a name="[24b]"></a>am2301a_read_byte</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, am2301a_dir.o(.text.am2301a_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = am2301a_read_byte &rArr; am2301a_read_bit &rArr; DDL_DelayUS
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_data
</UL>

<P><STRONG><a name="[24c]"></a>am2301a_read_data</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, am2301a_dir.o(.text.am2301a_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = am2301a_read_data &rArr; am2301a_Check &rArr; am2301a_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_byte
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_Check
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[249]"></a>am2301a_rst</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, am2301a_dir.o(.text.am2301a_rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = am2301a_rst &rArr; am2301a_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayUS
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_sda_out
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_data
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
</UL>

<P><STRONG><a name="[245]"></a>am2301a_sda_in</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, am2301a_dir.o(.text.am2301a_sda_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am2301a_sda_in &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>
<BR>[Called By]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_Check
</UL>

<P><STRONG><a name="[24d]"></a>am2301a_sda_out</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, am2301a_dir.o(.text.am2301a_sda_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = am2301a_sda_out &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_rst
</UL>

<P><STRONG><a name="[252]"></a>at_buf_freeSize</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, nb_uart_dir.o(.text.at_buf_freeSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = at_buf_freeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_write
</UL>

<P><STRONG><a name="[406]"></a>at_buf_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, nb_uart_dir.o(.text.at_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = at_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_uart_init
</UL>

<P><STRONG><a name="[250]"></a>at_buf_read</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nb_uart_dir.o(.text.at_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_buf_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_usedsize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
</UL>

<P><STRONG><a name="[251]"></a>at_buf_usedsize</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, nb_uart_dir.o(.text.at_buf_usedsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = at_buf_usedsize
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_read
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
</UL>

<P><STRONG><a name="[1f4]"></a>at_buf_write</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, nb_uart_dir.o(.text.at_buf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_buf_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_freeSize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxFull_IrqCallback
</UL>

<P><STRONG><a name="[22a]"></a>at_client_deinit</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, aiot_at_client_api.o(.text.at_client_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = at_client_deinit &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_deinit
</UL>

<P><STRONG><a name="[227]"></a>at_client_get</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, aiot_at_client_api.o(.text.at_client_get))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_at_hal_recv_handle
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_open_net_light
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_software_reboot
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_deinit
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[231]"></a>at_client_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, aiot_at_client_api.o(.text.at_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = at_client_init &rArr; at_client_para_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
</UL>

<P><STRONG><a name="[22c]"></a>at_client_obj_wait_connect</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, aiot_at_client_api.o(.text.at_client_obj_wait_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = at_client_obj_wait_connect &rArr; at_create_resp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
</UL>

<P><STRONG><a name="[238]"></a>at_create_resp</STRONG> (Thumb, 288 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.at_create_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_create_resp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
</UL>

<P><STRONG><a name="[239]"></a>at_delete_resp</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, aiot_at_client_api.o(.text.at_delete_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_delete_resp &rArr; aiot_sysdep_get_portfile
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
</UL>

<P><STRONG><a name="[262]"></a>at_get_last_cmd</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, aiot_at_client_api.o(.text.at_get_last_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = at_get_last_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[259]"></a>at_hal_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, posix_port.o(.text.at_hal_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = at_hal_init &rArr; nbiot_uart_init &rArr; at_uart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_uart_init
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_process_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[235]"></a>at_obj_exec_cmd</STRONG> (Thumb, 350 bytes, Stack size 56 bytes, aiot_at_client_api.o(.text.at_obj_exec_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_cmd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_open_net_light
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_software_reboot
</UL>

<P><STRONG><a name="[232]"></a>at_obj_set_urc_table</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, aiot_at_client_api.o(.text.at_obj_set_urc_table))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_obj_set_urc_table &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
</UL>

<P><STRONG><a name="[23d]"></a>at_req_parse_args</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.at_req_parse_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_req_parse_args &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_event_handler
</UL>

<P><STRONG><a name="[266]"></a>at_resp_get_line</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.at_resp_get_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_resp_get_line &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
</UL>

<P><STRONG><a name="[267]"></a>at_resp_get_line_by_kw</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.at_resp_get_line_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
</UL>

<P><STRONG><a name="[240]"></a>at_resp_parse_line_args</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, aiot_at_client_api.o(.text.at_resp_parse_line_args))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = at_resp_parse_line_args &rArr; at_resp_get_line &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
</UL>

<P><STRONG><a name="[268]"></a>at_resp_parse_line_args_by_kw</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, aiot_at_client_api.o(.text.at_resp_parse_line_args_by_kw))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
</UL>

<P><STRONG><a name="[265]"></a>at_sscanf</STRONG> (Thumb, 1484 bytes, Stack size 136 bytes, aiot_at_client_api.o(.text.at_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = at_sscanf &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoull
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoll
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
</UL>

<P><STRONG><a name="[270]"></a>at_uart_init</STRONG> (Thumb, 306 bytes, Stack size 112 bytes, nb_uart_dir.o(.text.at_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = at_uart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_power_on
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_timerout_config
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_uart_init
</UL>

<P><STRONG><a name="[275]"></a>at_uart_receive</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, nb_uart_dir.o(.text.at_uart_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_uart_receive &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_read
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_usedsize
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_control_thread
</UL>

<P><STRONG><a name="[276]"></a>at_uart_send</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, nb_uart_dir.o(.text.at_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = at_uart_send &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_usart_send
</UL>

<P><STRONG><a name="[261]"></a>at_vprintfln</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, aiot_at_client_api.o(.text.at_vprintfln))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_vprintfln &rArr; vsnprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>

<P><STRONG><a name="[278]"></a>atgm336h_data_init</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, gps_control.o(.text.atgm336h_data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = atgm336h_data_init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[c9]"></a>autoeclosing_control_thread</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = autoeclosing_control_thread &rArr; autoeclosing_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_off_autoeclosing
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_autoeclosing
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_autoeclosing
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_autoeclosing
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoeclosing_rs485_handle.o(.text.autoeclosing_process_init)
</UL>
<P><STRONG><a name="[283]"></a>autoeclosing_device_status_to_bit</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, eth_mqtt_handle.o(.text.autoeclosing_device_status_to_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = autoeclosing_device_status_to_bit
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_device_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[49c]"></a>autoeclosing_modbus_crc16</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, autoeclosing_rs485_handle.o(.text.autoeclosing_modbus_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = autoeclosing_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_off_autoeclosing
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_autoeclosing
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_autoeclosing
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_autoeclosing
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
</UL>

<P><STRONG><a name="[289]"></a>autoeclosing_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, autoeclosing_rs485_handle.o(.text.autoeclosing_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = autoeclosing_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[279]"></a>autoeclosing_usart_init</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, autoeclosing_rs485_dir.o(.text.autoeclosing_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = autoeclosing_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_timerout_config
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_irq_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[15e]"></a>bat_en_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bat_dir.o(.text.bat_en_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bat_en_off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_POWER_OFF_IrqCallback
</UL>

<P><STRONG><a name="[15f]"></a>bat_en_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bat_dir.o(.text.bat_en_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bat_en_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_POWER_OFF_IrqCallback
</UL>

<P><STRONG><a name="[28c]"></a>bat_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bat_dir.o(.text.bat_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bat_init &rArr; bat_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[28d]"></a>bat_io_init</STRONG> (Thumb, 180 bytes, Stack size 88 bytes, bat_dir.o(.text.bat_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = bat_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_StructInit
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ExIntCmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetDebugPort
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_en_off
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init
</UL>

<P><STRONG><a name="[be]"></a>bufchar</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, mqttpacket.o(.text.bufchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bufchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mqttpacket.o(.text.MQTTPacket_decodeBuf)
</UL>
<P><STRONG><a name="[295]"></a>buzzer_io_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, buzzer_dir.o(.text.buzzer_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = buzzer_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[296]"></a>buzzer_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer_dir.o(.text.buzzer_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buzzer_off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_io_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[297]"></a>buzzer_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buzzer_dir.o(.text.buzzer_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = buzzer_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[298]"></a>cam_receiver</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, camera_com_pro.o(.text.cam_receiver))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_version
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_photo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_len
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[29a]"></a>cam_write</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, camera_com_pro.o(.text.cam_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = cam_write &rArr; send_camera_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_camera_data
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_version
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_photo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_len
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[29c]"></a>camera_app</STRONG> (Thumb, 934 bytes, Stack size 48 bytes, camera_com_pro.o(.text.camera_app))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = camera_app &rArr; send_start_photo &rArr; send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_photo
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_read_len
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start_photo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_photoBuf_cls
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[4ae]"></a>camera_buf_clear</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, camera_dir.o(.text.camera_buf_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = camera_buf_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
</UL>

<P><STRONG><a name="[2a6]"></a>camera_buf_freeSize</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, camera_dir.o(.text.camera_buf_freeSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = camera_buf_freeSize
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_write
</UL>

<P><STRONG><a name="[2b4]"></a>camera_buf_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, camera_dir.o(.text.camera_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = camera_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_rs232_init
</UL>

<P><STRONG><a name="[2a4]"></a>camera_buf_read</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, camera_dir.o(.text.camera_buf_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = camera_buf_read &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_usedsize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
</UL>

<P><STRONG><a name="[2a5]"></a>camera_buf_usedsize</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, camera_dir.o(.text.camera_buf_usedsize))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = camera_buf_usedsize
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_read
</UL>

<P><STRONG><a name="[1f0]"></a>camera_buf_write</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, camera_dir.o(.text.camera_buf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = camera_buf_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_freeSize
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxFull_IrqCallback
</UL>

<P><STRONG><a name="[cb]"></a>camera_control_thread</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, camera_handle.o(.text.camera_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = camera_control_thread &rArr; camera_app &rArr; send_start_photo &rArr; send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_version
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_rs232_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera_handle.o(.text.camera_process_init)
</UL>
<P><STRONG><a name="[2b0]"></a>camera_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, camera_handle.o(.text.camera_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = camera_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[2a7]"></a>camera_rs232_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, camera_dir.o(.text.camera_rs232_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = camera_rs232_init &rArr; camera_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[2b5]"></a>camera_tcpc</STRONG> (Thumb, 1290 bytes, Stack size 144 bytes, camera_handle.o(.text.camera_tcpc))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = camera_tcpc &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock_tcp_rev_data
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lock_tcp_send_data
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lock_tcp_send_len
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock_tcp_rev_status
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lock_send_tcp_status
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lock_send_tcp_status
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_control_thread
</UL>

<P><STRONG><a name="[cf]"></a>camera_tcpc_control_thread</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, camera_handle.o(.text.camera_tcpc_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = camera_tcpc_control_thread &rArr; camera_tcpc &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera_handle.o(.text.camera_tcpc_init)
</UL>
<P><STRONG><a name="[2be]"></a>camera_tcpc_init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, camera_handle.o(.text.camera_tcpc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = camera_tcpc_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[2b2]"></a>camera_usart_init</STRONG> (Thumb, 244 bytes, Stack size 88 bytes, camera_dir.o(.text.camera_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = camera_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_timerout_config
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_rs232_init
</UL>

<P><STRONG><a name="[d3]"></a>circuit_breaker_control_thread</STRONG> (Thumb, 718 bytes, Stack size 64 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = circuit_breaker_control_thread &rArr; circuit_breaker_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_send_data
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_send_data
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_send_data
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_send_data
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coil_send_data
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circuit_breaker_rs485_handle.o(.text.circuit_breaker_process_init)
</UL>
<P><STRONG><a name="[49b]"></a>circuit_breaker_modbus_crc16</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_modbus_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_send_data
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_send_data
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_send_data
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_send_data
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_coil_send_data
</UL>

<P><STRONG><a name="[2d2]"></a>circuit_breaker_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = circuit_breaker_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[2c0]"></a>circuit_breaker_usart_init</STRONG> (Thumb, 244 bytes, Stack size 96 bytes, circuit_breaker_rs485_dir.o(.text.circuit_breaker_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = circuit_breaker_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_timerout_config
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2b7]"></a>close</STRONG> (Thumb, 294 bytes, Stack size 16 bytes, w5500_socket.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_control_thread
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[29d]"></a>cmd_test</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, camera_com_pro.o(.text.cmd_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cmd_test &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
</UL>

<P><STRONG><a name="[2d7]"></a>conf_default_psm</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, project_psm_control.o(.text.conf_default_psm))
<BR><BR>[Stack]<UL><LI>Max Depth = 1672<LI>Call Chain = conf_default_psm &rArr; write_slave_conf &rArr; add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_slave_conf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_mac_conf
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_int
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[1bf]"></a>connect</STRONG> (Thumb, 524 bytes, Stack size 32 bytes, w5500_socket.o(.text.connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = connect &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkConnect
</UL>

<P><STRONG><a name="[2dc]"></a>control_slave_relay</STRONG> (Thumb, 174 bytes, Stack size 88 bytes, monitor_board_handle.o(.text.control_slave_relay))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = control_slave_relay &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[2df]"></a>core_ringbuf_free</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, core_ring_buffer.o(.text.core_ringbuf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_ringbuf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_write
</UL>

<P><STRONG><a name="[258]"></a>core_ringbuf_init</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, core_ring_buffer.o(.text.core_ringbuf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = core_ringbuf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
</UL>

<P><STRONG><a name="[2de]"></a>core_ringbuf_is_empty</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, core_ring_buffer.o(.text.core_ringbuf_is_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = core_ringbuf_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_pop_char
</UL>

<P><STRONG><a name="[256]"></a>core_ringbuf_pop_char</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, core_ring_buffer.o(.text.core_ringbuf_pop_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = core_ringbuf_pop_char &rArr; core_ringbuf_is_empty
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_is_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
</UL>

<P><STRONG><a name="[228]"></a>core_ringbuf_write</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, core_ring_buffer.o(.text.core_ringbuf_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = core_ringbuf_write &rArr; core_ringbuf_free
</UL>
<BR>[Calls]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_free
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_at_hal_recv_handle
</UL>

<P><STRONG><a name="[b]"></a>core_sysdep_free</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = core_sysdep_free &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[a]"></a>core_sysdep_malloc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = core_sysdep_malloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[12]"></a>core_sysdep_mutex_deinit</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_mutex_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = core_sysdep_mutex_deinit &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[f]"></a>core_sysdep_mutex_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, posix_port.o(.text.core_sysdep_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = core_sysdep_mutex_init &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[10]"></a>core_sysdep_mutex_lock</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_mutex_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = core_sysdep_mutex_lock &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[11]"></a>core_sysdep_mutex_unlock</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_mutex_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = core_sysdep_mutex_unlock &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[16]"></a>core_sysdep_sem_deinit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_sem_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = core_sysdep_sem_deinit &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[13]"></a>core_sysdep_sem_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, posix_port.o(.text.core_sysdep_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = core_sysdep_sem_init &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[15]"></a>core_sysdep_sem_release</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = core_sysdep_sem_release &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[14]"></a>core_sysdep_sem_take</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = core_sysdep_sem_take &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[c]"></a>core_sysdep_sleep</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = core_sysdep_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[d]"></a>core_sysdep_thread_create</STRONG> (Thumb, 64 bytes, Stack size 64 bytes, posix_port.o(.text.core_sysdep_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = core_sysdep_thread_create &rArr; osThreadNew &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[e]"></a>core_sysdep_thread_destroy</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, posix_port.o(.text.core_sysdep_thread_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = core_sysdep_thread_destroy &rArr; osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[8]"></a>core_sysdep_time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, posix_port.o(.text.core_sysdep_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = core_sysdep_time &rArr; xTaskGetTickCount
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[400]"></a>core_uint2hexstr</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, core_string.o(.text.core_uint2hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = core_uint2hexstr
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[9]"></a>core_usart_send</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, posix_port.o(.text.core_usart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = core_usart_send &rArr; at_uart_send &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.data.g_aiot_sysdep_portfile)
</UL>
<P><STRONG><a name="[2e7]"></a>crc32_init</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, psm_crc32.o(.text.crc32_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = crc32_init &rArr; LL_PERIPH_WP &rArr; PWC_REG_Lock
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_read_layout
</UL>

<P><STRONG><a name="[2e8]"></a>create_layout_binary</STRONG> (Thumb, 362 bytes, Stack size 64 bytes, partition.o(.text.create_layout_binary))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = create_layout_binary &rArr; flash_get_comp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_erase
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_comp
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_init
</UL>

<P><STRONG><a name="[2ee]"></a>ctlnetwork</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, wizchip_conf.o(.text.ctlnetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ctlnetwork &rArr; wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_gettimeout
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_settimeout
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetmode
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetmode
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getnetinfo
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setnetinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_info
</UL>

<P><STRONG><a name="[2f5]"></a>ctlwizchip</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, wizchip_conf.o(.text.ctlwizchip))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ctlwizchip &rArr; wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphylink
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphypmode
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_getphyconf
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterruptmask
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_setinterruptmask
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_getinterrupt
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_clrinterrupt
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_parameters_configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
</UL>

<P><STRONG><a name="[1b8]"></a>cycle</STRONG> (Thumb, 464 bytes, Stack size 96 bytes, eth_to_mqtt.o(.text.cycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTCloseSession
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;waitfor
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>

<P><STRONG><a name="[305]"></a>data_init</STRONG> (Thumb, 410 bytes, Stack size 24 bytes, main.o(.text.data_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 1552<LI>Call Chain = data_init &rArr; read_write_slave_information_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_ok_flash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dhcp_flash
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_port_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_query_time_flash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_rs485_id_flash
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_device_id_flash
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[f7]"></a>dbg_init</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, sys_stdio.o(.text.dbg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dbg_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetClockDiv
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_stdio.o(.text.sys_stdio_init)
</UL>
<P><STRONG><a name="[0]"></a>default_mcu_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_server.o(.text.default_mcu_reset))
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(.data.HTTPServer_ReStart)
</UL>
<P><STRONG><a name="[1]"></a>default_wdt_reset</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, http_server.o(.text.default_wdt_reset))
<BR>[Address Reference Count : 1]<UL><LI> http_server.o(.data.HTTPServer_WDT_Reset)
</UL>
<P><STRONG><a name="[303]"></a>deliverMessage</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, eth_to_mqtt.o(.text.deliverMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = deliverMessage &rArr; MQTTPacket_equals &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_equals
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NewMessageData
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isTopicMatched
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[ed]"></a>demo_default_recv_handler</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, nb_iot_mqtt_handle.o(.text.demo_default_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = demo_default_recv_handler &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
</UL>
<P><STRONG><a name="[ec]"></a>demo_event_handler</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, nb_iot_mqtt_handle.o(.text.demo_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = demo_event_handler &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
</UL>
<P><STRONG><a name="[eb]"></a>demo_state_logcb</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, nb_iot_mqtt_handle.o(.text.demo_state_logcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = demo_state_logcb &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
</UL>
<P><STRONG><a name="[ee]"></a>demo_topic_recv_handler</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nb_iot_mqtt_handle.o(.text.demo_topic_recv_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = demo_topic_recv_handler &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread)
</UL>
<P><STRONG><a name="[169]"></a>disconnect</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, w5500_socket.o(.text.disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disconnect &rArr; close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_disconnect
</UL>

<P><STRONG><a name="[32e]"></a>display_oled_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, oled_handle.o(.text.display_oled_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = display_oled_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[330]"></a>display_reg_webContent_list</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, http_server.o(.text.display_reg_webContent_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = display_reg_webContent_list &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
</UL>

<P><STRONG><a name="[331]"></a>eTaskGetState</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, tasks.o(.text.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[e4]"></a>final_about_to_die</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, main.o(.text.final_about_to_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = final_about_to_die &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main_start)
</UL>
<P><STRONG><a name="[334]"></a>find_http_uri_type</STRONG> (Thumb, 814 bytes, Stack size 24 bytes, http_parser.o(.text.find_http_uri_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = find_http_uri_type &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[335]"></a>find_userReg_webContent</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, http_server.o(.text.find_userReg_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_userReg_webContent &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[2ea]"></a>flash_drv_erase</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, flash_drv.o(.text.flash_drv_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = flash_drv_erase &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Erase
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_erase_flash
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
</UL>

<P><STRONG><a name="[338]"></a>flash_drv_init</STRONG> (Thumb, 242 bytes, Stack size 56 bytes, flash_drv.o(.text.flash_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = flash_drv_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetConfig
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetConfig
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Init
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_qspi_read_uniqid
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_to_qspi_read_jedecid
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
</UL>

<P><STRONG><a name="[33f]"></a>flash_drv_read</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, flash_drv.o(.text.flash_drv_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Read
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_read_layout
</UL>

<P><STRONG><a name="[2eb]"></a>flash_drv_write</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, flash_drv.o(.text.flash_drv_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = flash_drv_write &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Write
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash_same_device_rw
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
</UL>

<P><STRONG><a name="[2e9]"></a>flash_get_comp</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, partition.o(.text.flash_get_comp))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = flash_get_comp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
</UL>

<P><STRONG><a name="[33c]"></a>flash_to_qspi_read_jedecid</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, flash_drv.o(.text.flash_to_qspi_read_jedecid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = flash_to_qspi_read_jedecid &rArr; QSPI_FLASH_Getjedecid &rArr; QSPI_FLASH_ReadInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Getjedecid
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[33e]"></a>flash_to_qspi_read_uniqid</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, flash_drv.o(.text.flash_to_qspi_read_uniqid))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = flash_to_qspi_read_uniqid &rArr; QSPI_FLASH_GetUniqueID &rArr; QSPI_FLASH_ReadInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_GetUniqueID
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[104]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, hc32_ll_utility.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; DDL_ConsoleOutputChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_ConsoleOutputChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[16d]"></a>getSn_RX_RSR</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, w5500.o(.text.getSn_RX_RSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getSn_RX_RSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[342]"></a>getSn_TX_FSR</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, w5500.o(.text.getSn_TX_FSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = getSn_TX_FSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[346]"></a>get_http_param_value</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, http_parser.o(.text.get_http_param_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = get_http_param_value &rArr; mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unescape_http_url
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replacetochar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[34a]"></a>get_http_uri_name</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, http_parser.o(.text.get_http_uri_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_http_uri_name &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[3b1]"></a>get_key_value</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, key_dir.o(.text.get_key_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_key_value
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[2b8]"></a>get_lock_send_tcp_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lock_rs485_handle.o(.text.get_lock_send_tcp_status))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[3c5]"></a>get_lock_tcp_rev_len</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lock_rs485_handle.o(.text.get_lock_tcp_rev_len))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
</UL>

<P><STRONG><a name="[2ba]"></a>get_lock_tcp_send_data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lock_rs485_handle.o(.text.get_lock_tcp_send_data))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[2b9]"></a>get_lock_tcp_send_len</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lock_rs485_handle.o(.text.get_lock_tcp_send_len))
<BR><BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[34d]"></a>get_mac</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, project_psm_control.o(.text.get_mac))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_mac
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
</UL>

<P><STRONG><a name="[224]"></a>get_psm_conf</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, project_psm_control.o(.text.get_psm_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_val
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_device_id_flash
</UL>

<P><STRONG><a name="[221]"></a>get_psm_conf_int</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, project_psm_control.o(.text.get_psm_conf_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1200<LI>Call Chain = get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_int
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_int
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_ok_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dhcp_flash
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_port_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_query_time_flash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_rs485_id_flash
</UL>

<P><STRONG><a name="[350]"></a>gps_data_resolving</STRONG> (Thumb, 552 bytes, Stack size 128 bytes, gps_control.o(.text.gps_data_resolving))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = gps_data_resolving &rArr; gps_parse &rArr; get_double_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[353]"></a>gps_init</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gps_control.o(.text.gps_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = gps_init &rArr; gps_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atgm336h_data_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[351]"></a>gps_parse</STRONG> (Thumb, 376 bytes, Stack size 56 bytes, gps_control.o(.text.gps_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = gps_parse &rArr; get_double_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UTC2BTC
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
</UL>

<P><STRONG><a name="[354]"></a>gps_usart_init</STRONG> (Thumb, 204 bytes, Stack size 80 bytes, gps_dir.o(.text.gps_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = gps_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
</UL>

<P><STRONG><a name="[364]"></a>healthmon_init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, healthmon.o(.text.healthmon_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = healthmon_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[10d]"></a>healthmon_register_handler</STRONG> (Thumb, 388 bytes, Stack size 48 bytes, healthmon.o(.text.healthmon_register_handler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = healthmon_register_handler &rArr; lock_and_find_handler_by_name &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_handler_list
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_and_find_handler_by_name
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[10b]"></a>healthmon_set_final_about_to_die_handler</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, healthmon.o(.text.healthmon_set_final_about_to_die_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = healthmon_set_final_about_to_die_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[373]"></a>healthmon_start</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, healthmon.o(.text.healthmon_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = healthmon_start &rArr; os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[10c]"></a>healthmon_unregister_handler</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, healthmon.o(.text.healthmon_unregister_handler), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = healthmon_unregister_handler &rArr; lock_and_find_handler_by_name &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_handler_list
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_and_find_handler_by_name
</UL>

<P><STRONG><a name="[376]"></a>httpServer_Sockinit</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, http_server.o(.text.httpServer_Sockinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = httpServer_Sockinit
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_init
</UL>

<P><STRONG><a name="[375]"></a>httpServer_init</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, http_server.o(.text.httpServer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = httpServer_init &rArr; httpServer_Sockinit
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_Sockinit
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[377]"></a>httpServer_run</STRONG> (Thumb, 938 bytes, Stack size 48 bytes, http_server.o(.text.httpServer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 2968<LI>Call Chain = httpServer_run &rArr; http_process_handler &rArr; http_post_cgi_handler &rArr; predefined_set_cgi_processor &rArr; set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_disconnect
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHTTPSocketNum
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_http_request
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[112]"></a>httpServer_time_handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, http_server.o(.text.httpServer_time_handler), UNUSED, KEPT)

<P><STRONG><a name="[110]"></a>http_get_cgi_handler</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, http_util.o(.text.http_get_cgi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = http_get_cgi_handler &rArr; predefined_get_cgi_processor &rArr; make_json_info &rArr; ctlnetwork &rArr; wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[111]"></a>http_post_cgi_handler</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, http_util.o(.text.http_post_cgi_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 1368<LI>Call Chain = http_post_cgi_handler &rArr; predefined_set_cgi_processor &rArr; set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[387]"></a>hwrtc_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, hwrtc.o(.text.hwrtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = hwrtc_init &rArr; hwrtc_time_update &rArr; rtc_drv_get &rArr; hc32_rtc_get_time_stamp &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_start
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_set_cb
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_time_update
</UL>
<BR>[Called By]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_init
</UL>

<P><STRONG><a name="[38a]"></a>hwrtc_time_update</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hwrtc.o(.text.hwrtc_time_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = hwrtc_time_update &rArr; rtc_drv_get &rArr; hc32_rtc_get_time_stamp &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_get
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_init
</UL>

<P><STRONG><a name="[38d]"></a>inet_addr_</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, http_parser.o(.text.inet_addr_))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = inet_addr_ &rArr; ATOI &rArr; C2D
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[39f]"></a>jsmn_init</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, jsmn.o(.text.jsmn_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = jsmn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_obj_init
</UL>

<P><STRONG><a name="[38e]"></a>jsmn_parse</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, jsmn.o(.text.jsmn_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_init
</UL>

<P><STRONG><a name="[393]"></a>json_close_object</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, json_generator.o(.text.json_close_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = json_close_object &rArr; verify_buffer_limit &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_buffer_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[395]"></a>json_get_composite_object</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, json_parser.o(.text.json_get_composite_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = json_get_composite_object &rArr; json_get_value &rArr; json_token_streq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[397]"></a>json_get_val_str</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, json_parser.o(.text.json_get_val_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = json_get_val_str &rArr; json_get_value &rArr; json_token_streq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_to_str
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_str
</UL>

<P><STRONG><a name="[399]"></a>json_get_val_str_len</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, json_parser.o(.text.json_get_val_str_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = json_get_val_str_len &rArr; json_get_value &rArr; json_token_streq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_str
</UL>

<P><STRONG><a name="[39b]"></a>json_init</STRONG> (Thumb, 246 bytes, Stack size 40 bytes, json_parser.o(.text.json_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = json_init &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_is_array_valid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_is_object_valid
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_obj_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
</UL>

<P><STRONG><a name="[3a0]"></a>json_parse_start</STRONG> (Thumb, 206 bytes, Stack size 48 bytes, json_parser.o(.text.json_parse_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = json_parse_start &rArr; json_init &rArr; jsmn_parse &rArr; jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_stop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_init
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_obj_init
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[3a2]"></a>json_parse_stop</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, json_parser.o(.text.json_parse_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = json_parse_stop &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[3a3]"></a>json_push_object</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, json_generator.o(.text.json_push_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = json_push_object &rArr; verify_buffer_limit &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_skip
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_buffer_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[3f8]"></a>json_release_composite_object</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, json_parser.o(.text.json_release_composite_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = json_release_composite_object
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[3a6]"></a>json_set_object_value</STRONG> (Thumb, 680 bytes, Stack size 80 bytes, json_generator.o(.text.json_set_object_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = json_set_object_value &rArr; verify_json_start &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_json_start
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_skip
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_buffer_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[3aa]"></a>json_start_object</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, json_generator.o(.text.json_start_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = json_start_object &rArr; verify_buffer_limit &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rev_skip
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_buffer_limit
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[3ab]"></a>json_str_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, json_generator.o(.text.json_str_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = json_str_init
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[304]"></a>keepalive</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, eth_to_mqtt.o(.text.keepalive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_pingreq
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPacket
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[d9]"></a>key_control_thread</STRONG> (Thumb, 2104 bytes, Stack size 24 bytes, key_handle.o(.text.key_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = key_control_thread &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_on
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_off
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_spd_sensor
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_lock_sensor
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPort
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_water_sensor
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_smoke_sensor
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key_value
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detect_all
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_in_io_init
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buzzer_io_init
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_handle.o(.text.key_process_init)
</UL>
<P><STRONG><a name="[3b0]"></a>key_detect_all</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, key_dir.o(.text.key_detect_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = key_detect_all &rArr; key_detect &rArr; put_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detect
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3ac]"></a>key_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, key_dir.o(.text.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = key_init &rArr; key_hard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_hard
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_var
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3bb]"></a>key_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, key_handle.o(.text.key_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = key_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[3bd]"></a>led_arm_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_dir.o(.text.led_arm_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_arm_off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[3be]"></a>led_arm_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_dir.o(.text.led_arm_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_arm_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[3bf]"></a>led_io_init</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, led_dir.o(.text.led_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = led_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[3c0]"></a>led_net_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_dir.o(.text.led_net_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_net_off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[3c1]"></a>led_net_on</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, led_dir.o(.text.led_net_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_net_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[37e]"></a>listen</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, w5500_socket.o(.text.listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = listen &rArr; close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[3c2]"></a>loadwebpages</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, http_server.o(.text.loadwebpages))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = loadwebpages &rArr; display_reg_webContent_list &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_reg_webContent_list
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[e3]"></a>lock_control_thread</STRONG> (Thumb, 452 bytes, Stack size 16 bytes, lock_rs485_handle.o(.text.lock_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lock_control_thread &rArr; lock_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lock_data
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lock_tcp_rev_len
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_rs485_handle.o(.text.lock_process_init)
</UL>
<P><STRONG><a name="[3cd]"></a>lock_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lock_rs485_handle.o(.text.lock_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lock_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[3c4]"></a>lock_usart_init</STRONG> (Thumb, 246 bytes, Stack size 88 bytes, lock_rs485_dir.o(.text.lock_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lock_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_timerout_config
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_irq_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
</UL>

<P><STRONG><a name="[b7]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = main &rArr; os_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_init
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stdio_init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_mode
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clk_init
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mode_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f1]"></a>main_start</STRONG> (Thumb, 798 bytes, Stack size 24 bytes, main.o(.text.main_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 1696<LI>Call Chain = main_start &rArr; conf_default_psm &rArr; write_slave_conf &rArr; add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortGetFreeHeapSize
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_process_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_process_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_process_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_process_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_process_init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hal_init
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_process_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_process_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_process_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_oled_process_init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_set_final_about_to_die_handler
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_start
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_init
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_time_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.os_init)
</UL>
<P><STRONG><a name="[3dc]"></a>make_http_response_head</STRONG> (Thumb, 478 bytes, Stack size 40 bytes, http_parser.o(.text.make_http_response_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = make_http_response_head &rArr; sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
</UL>

<P><STRONG><a name="[3de]"></a>make_json_info</STRONG> (Thumb, 610 bytes, Stack size 448 bytes, http_util.o(.text.make_json_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = make_json_info &rArr; ctlnetwork &rArr; wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_get_cgi_processor
</UL>

<P><STRONG><a name="[347]"></a>mid</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, http_parser.o(.text.mid))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = mid &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[e7]"></a>modbus_control_thread</STRONG> (Thumb, 1162 bytes, Stack size 64 bytes, monitor_board_handle.o(.text.modbus_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 1592<LI>Call Chain = modbus_control_thread &rArr; read_write_slave_information_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slave_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_slave_relay
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_slave_driver_id
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_ok_flash
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_board_handle.o(.text.modbus_process_init)
</UL>
<P><STRONG><a name="[1f3]"></a>modbus_crc16</STRONG> (Thumb, 158 bytes, Stack size 12 bytes, monitor_board_handle.o(.text.modbus_crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_slave_data
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;control_slave_relay
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_slave_driver_id
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_RxFull_IrqCallback
</UL>

<P><STRONG><a name="[3d6]"></a>modbus_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, monitor_board_handle.o(.text.modbus_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = modbus_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[3df]"></a>monitor_usart_init</STRONG> (Thumb, 202 bytes, Stack size 88 bytes, monitor_board_dir.o(.text.monitor_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = monitor_usart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg3PeriphClockCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Init
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_StructInit
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[e9]"></a>mqtt_control_thread</STRONG> (Thumb, 1240 bytes, Stack size 80 bytes, eth_mqtt_handle.o(.text.mqtt_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3872<LI>Call Chain = mqtt_control_thread &rArr; report_gate_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribe
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnect
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTClientInit
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkConnect
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkInit
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mqtt_handle.o(.text.mqtt_process_init)
</UL>
<P><STRONG><a name="[3f5]"></a>mqtt_process_init</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, eth_mqtt_handle.o(.text.mqtt_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = mqtt_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[ef]"></a>nb_mqtt_control_thread</STRONG> (Thumb, 814 bytes, Stack size 80 bytes, nb_iot_mqtt_handle.o(.text.nb_mqtt_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = nb_mqtt_control_thread &rArr; qsdk_nb_quick_connect &rArr; qsdk_nb_get_time &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_deinit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_uint2hexstr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_get_connect
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_state_set_logcb
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_set_portfile
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delete
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_iot_mqtt_handle.o(.text.nb_mqtt_process_init)
</UL>
<P><STRONG><a name="[3d7]"></a>nb_mqtt_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, nb_iot_mqtt_handle.o(.text.nb_mqtt_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nb_mqtt_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[f0]"></a>nb_rx_control_thread</STRONG> (Thumb, 94 bytes, Stack size 2072 bytes, posix_port.o(.text.nb_rx_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 2360<LI>Call Chain = nb_rx_control_thread &rArr; at_uart_receive &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_at_hal_recv_handle
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Address Reference Count : 1]<UL><LI> posix_port.o(.text.nb_rx_process_init)
</UL>
<P><STRONG><a name="[25b]"></a>nb_rx_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, posix_port.o(.text.nb_rx_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = nb_rx_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hal_init
</UL>

<P><STRONG><a name="[233]"></a>nbiot_power_off</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nb_uart_dir.o(.text.nbiot_power_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbiot_power_off &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
</UL>

<P><STRONG><a name="[234]"></a>nbiot_power_on</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, nb_uart_dir.o(.text.nbiot_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = nbiot_power_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
</UL>

<P><STRONG><a name="[25a]"></a>nbiot_uart_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, nb_uart_dir.o(.text.nbiot_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = nbiot_uart_init &rArr; at_uart_init &rArr; USART_UART_Init &rArr; USART_SetBaudrate &rArr; SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_init
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_hal_init
</UL>

<P><STRONG><a name="[407]"></a>oled_clear</STRONG> (Thumb, 84 bytes, Stack size 144 bytes, oled_dir.o(.text.oled_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = oled_clear &rArr; oled_write_data_all &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data_all
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[41c]"></a>oled_clear_point</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, oled_dir.o(.text.oled_clear_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_clear_point
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_chinese
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_char
</UL>

<P><STRONG><a name="[d4]"></a>oled_control_thread</STRONG> (Thumb, 2928 bytes, Stack size 216 bytes, oled_handle.o(.text.oled_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 524<LI>Call Chain = oled_control_thread &rArr; oled_init &rArr; oled_clear &rArr; oled_write_data_all &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_chinese
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_string
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_net_on
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_net_off
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_on
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_arm_off
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_TogglePins
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_read_data
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_paint_clear
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;am2301a_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_io_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_current_value
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_voltage_value
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> oled_handle.o(.text.display_oled_process_init)
</UL>
<P><STRONG><a name="[413]"></a>oled_display</STRONG> (Thumb, 146 bytes, Stack size 144 bytes, oled_dir.o(.text.oled_display))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = oled_display &rArr; oled_write_data_all &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data_all
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[41b]"></a>oled_draw_point</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, oled_dir.o(.text.oled_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = oled_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_chinese
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_char
</UL>

<P><STRONG><a name="[40a]"></a>oled_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, oled_dir.o(.text.oled_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = oled_init &rArr; oled_clear &rArr; oled_write_data_all &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_reg
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_reset
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_init
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_io_init
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[417]"></a>oled_init_reg</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, oled_dir.o(.text.oled_init_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = oled_init_reg &rArr; oled_write_reg &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[414]"></a>oled_io_init</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, oled_dir.o(.text.oled_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = oled_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[40b]"></a>oled_paint_clear</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, oled_dir.o(.text.oled_paint_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = oled_paint_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[416]"></a>oled_reset</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, oled_dir.o(.text.oled_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = oled_reset &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[41a]"></a>oled_show_char</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, oled_dir.o(.text.oled_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oled_show_char &rArr; oled_clear_point
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_point
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_string
</UL>

<P><STRONG><a name="[410]"></a>oled_show_chinese</STRONG> (Thumb, 378 bytes, Stack size 24 bytes, oled_dir.o(.text.oled_show_chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = oled_show_chinese &rArr; oled_clear_point
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear_point
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[40f]"></a>oled_show_string</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, oled_dir.o(.text.oled_show_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = oled_show_string &rArr; oled_show_char &rArr; oled_clear_point
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_show_char
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[415]"></a>oled_spi_init</STRONG> (Thumb, 126 bytes, Stack size 88 bytes, oled_dir.o(.text.oled_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = oled_spi_init &rArr; SPI_DelayTimeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayStructInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
</UL>

<P><STRONG><a name="[422]"></a>oled_spi_write</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, oled_dir.o(.text.oled_spi_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Trans
</UL>
<BR>[Called By]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_data_all
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_write_reg
</UL>

<P><STRONG><a name="[409]"></a>oled_write_data_all</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, oled_dir.o(.text.oled_write_data_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = oled_write_data_all &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
</UL>

<P><STRONG><a name="[408]"></a>oled_write_reg</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, oled_dir.o(.text.oled_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = oled_write_reg &rArr; oled_spi_write &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_spi_write
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_display
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_clear
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init_reg
</UL>

<P><STRONG><a name="[2e4]"></a>osThreadNew</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, posix_port.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = osThreadNew &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_thread_create
</UL>

<P><STRONG><a name="[2e5]"></a>osThreadTerminate</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, posix_port.o(.text.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osThreadTerminate &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_thread_destroy
</UL>

<P><STRONG><a name="[3d4]"></a>os_init</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, main.o(.text.os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = os_init &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[431]"></a>os_rwlock_create</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sys_os.o(.text.os_rwlock_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = os_rwlock_create &rArr; os_rwlock_create_with_cb &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_create_with_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_init_locks
</UL>

<P><STRONG><a name="[432]"></a>os_rwlock_create_with_cb</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sys_os.o(.text.os_rwlock_create_with_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = os_rwlock_create_with_cb &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_create
</UL>

<P><STRONG><a name="[434]"></a>os_rwlock_delete</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sys_os.o(.text.os_rwlock_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_rwlock_delete &rArr; os_mutex_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_delete
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_deinit_locks
</UL>

<P><STRONG><a name="[436]"></a>os_rwlock_read_lock</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, sys_os.o(.text.os_rwlock_read_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_rwlock_read_lock &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwlock_part
</UL>

<P><STRONG><a name="[438]"></a>os_rwlock_read_unlock</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sys_os.o(.text.os_rwlock_read_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = os_rwlock_read_unlock &rArr; os_semaphore_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwunlock_part
</UL>

<P><STRONG><a name="[43a]"></a>os_rwlock_write_lock</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, sys_os.o(.text.os_rwlock_write_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = os_rwlock_write_lock &rArr; os_semaphore_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwlock_part
</UL>

<P><STRONG><a name="[43b]"></a>os_rwlock_write_unlock</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sys_os.o(.text.os_rwlock_write_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = os_rwlock_write_unlock &rArr; os_semaphore_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwunlock_part
</UL>

<P><STRONG><a name="[379]"></a>parse_http_request</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, http_parser.o(.text.parse_http_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = parse_http_request &rArr; strtok
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[471]"></a>part_get_layout_by_id</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, partition.o(.text.part_get_layout_by_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = part_get_layout_by_id
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
</UL>

<P><STRONG><a name="[444]"></a>part_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, partition.o(.text.part_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = part_init &rArr; create_layout_binary &rArr; flash_get_comp &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_read_layout
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_table_addr_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
</UL>

<P><STRONG><a name="[472]"></a>part_to_flash_desc</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, partition.o(.text.part_to_flash_desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = part_to_flash_desc
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
</UL>

<P><STRONG><a name="[381]"></a>predefined_get_cgi_processor</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, http_util.o(.text.predefined_get_cgi_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = predefined_get_cgi_processor &rArr; make_json_info &rArr; ctlnetwork &rArr; wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_info
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
</UL>

<P><STRONG><a name="[382]"></a>predefined_set_cgi_processor</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, http_util.o(.text.predefined_set_cgi_processor))
<BR><BR>[Stack]<UL><LI>Max Depth = 1328<LI>Call Chain = predefined_set_cgi_processor &rArr; set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
</UL>

<P><STRONG><a name="[306]"></a>psm_control_init</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, project_psm_control.o(.text.psm_control_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = psm_control_init &rArr; psm_module_init &rArr; psm_module_physical_init &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_to_flash_desc
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_get_layout_by_id
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_init
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[47a]"></a>psm_get_variable</STRONG> (Thumb, 266 bytes, Stack size 104 bytes, psm_v2.o(.text.psm_get_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwunlock_part
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwlock_part
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_read
</UL>
<BR>[Called By]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_str
</UL>

<P><STRONG><a name="[474]"></a>psm_is_free_space</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, psm_v2.o(.text.psm_is_free_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psm_is_free_space
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_all_objects
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_object
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
</UL>

<P><STRONG><a name="[473]"></a>psm_module_init</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, psm_v2.o(.text.psm_module_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = psm_module_init &rArr; psm_module_physical_init &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwunlock_part
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwlock_part
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSM_List_AddTail
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_deinit_locks
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_physical_init
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_init_locks
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_init_verify_params
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_block_size
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical_section
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_existing_psm_object
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical_section
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_control_init
</UL>

<P><STRONG><a name="[21d]"></a>psm_read_flash</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, psm_v2.o(.text.psm_read_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_read
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_swap_descriptor
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_name_hash
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_name
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_all_objects
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_object
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_search_index
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_verify
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_read
</UL>

<P><STRONG><a name="[47b]"></a>psm_rwlock_part</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, psm_v2.o(.text.psm_rwlock_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = psm_rwlock_part &rArr; os_rwlock_read_lock &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_write_lock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[47c]"></a>psm_rwunlock_part</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, psm_v2.o(.text.psm_rwunlock_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = psm_rwunlock_part &rArr; os_rwlock_read_unlock &rArr; os_semaphore_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_write_unlock
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[48b]"></a>psm_set_variable</STRONG> (Thumb, 236 bytes, Stack size 104 bytes, psm_v2.o(.text.psm_set_variable))
<BR><BR>[Stack]<UL><LI>Max Depth = 992<LI>Call Chain = psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwunlock_part
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_rwlock_part
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_write
</UL>
<BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_str
</UL>

<P><STRONG><a name="[3b8]"></a>put_key_value</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, key_dir.o(.text.put_key_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = put_key_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detect
</UL>

<P><STRONG><a name="[2e1]"></a>pvPortMalloc</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, heap_4.o(.text.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash_same_device_rw
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_webContent
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_malloc
</UL>

<P><STRONG><a name="[4fa]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, tasks.o(.text.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[45e]"></a>pxPortInitialiseStack</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, port.o(.text.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[3ff]"></a>qsdk_mqtt_get_connect</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, aiot_mqtt_api.o(.text.qsdk_mqtt_get_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = qsdk_mqtt_get_connect
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[3fe]"></a>qsdk_mqtt_open</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, aiot_mqtt_api.o(.text.qsdk_mqtt_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = qsdk_mqtt_open &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[490]"></a>qsdk_nb_get_csq</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_get_csq))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = qsdk_nb_get_csq &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[491]"></a>qsdk_nb_get_imei</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_get_imei))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = qsdk_nb_get_imei &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[492]"></a>qsdk_nb_get_imsi</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_get_imsi))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = qsdk_nb_get_imsi &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[493]"></a>qsdk_nb_get_net_connect</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_get_net_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = qsdk_nb_get_net_connect &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[494]"></a>qsdk_nb_get_time</STRONG> (Thumb, 218 bytes, Stack size 72 bytes, aiot_module_api.o(.text.qsdk_nb_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = qsdk_nb_get_time &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_set_rtc_time
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[496]"></a>qsdk_nb_open_net_light</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, aiot_module_api.o(.text.qsdk_nb_open_net_light))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = qsdk_nb_open_net_light &rArr; at_obj_exec_cmd &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[3fb]"></a>qsdk_nb_quick_connect</STRONG> (Thumb, 816 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_quick_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = qsdk_nb_quick_connect &rArr; qsdk_nb_get_time &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_open_net_light
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_net_connect
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_csq
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imei
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_imsi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[497]"></a>qsdk_nb_sim_check</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, aiot_module_api.o(.text.qsdk_nb_sim_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = qsdk_nb_sim_check &rArr; at_resp_parse_line_args_by_kw &rArr; at_resp_get_line_by_kw &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_delete_resp
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
</UL>

<P><STRONG><a name="[2aa]"></a>query_version</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, camera_com_pro.o(.text.query_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = query_version &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[193]"></a>readChar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mqttpacket.o(.text.readChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = readChar
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_connack
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[195]"></a>readInt</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mqttpacket.o(.text.readInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_suback
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_ack
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readMQTTLenString
</UL>

<P><STRONG><a name="[197]"></a>readMQTTLenString</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mqttpacket.o(.text.readMQTTLenString))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = readMQTTLenString &rArr; readInt
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readInt
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDeserialize_publish
</UL>

<P><STRONG><a name="[4b7]"></a>read_autoeclosing_creepage_current_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_creepage_current_value))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[49a]"></a>read_autoeclosing_current_value</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = read_autoeclosing_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[284]"></a>read_autoeclosing_device_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_device_status))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_device_status_to_bit
</UL>

<P><STRONG><a name="[4b5]"></a>read_autoeclosing_do_status</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_do_status))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[4bb]"></a>read_autoeclosing_fault_opening_times</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_fault_opening_times))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[4ba]"></a>read_autoeclosing_low_voltage_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_low_voltage_value))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[4b9]"></a>read_autoeclosing_over_voltage_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_over_voltage_value))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[4b8]"></a>read_autoeclosing_reclosing_times</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_reclosing_times))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[4b6]"></a>read_autoeclosing_voltage_value</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, autoeclosing_rs485_handle.o(.text.read_autoeclosing_voltage_value))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[2c9]"></a>read_coil_handle</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, circuit_breaker_rs485_handle.o(.text.read_coil_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_coil_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2c7]"></a>read_discrete_handle</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, circuit_breaker_rs485_handle.o(.text.read_discrete_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_discrete_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2c6]"></a>read_discrete_send_data</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, circuit_breaker_rs485_handle.o(.text.read_discrete_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = read_discrete_send_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[27e]"></a>read_do_autoeclosing</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, autoeclosing_rs485_handle.o(.text.read_do_autoeclosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_do_autoeclosing &rArr; autoeclosing_modbus_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[27f]"></a>read_do_handle</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, autoeclosing_rs485_handle.o(.text.read_do_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = read_do_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[2c5]"></a>read_hold_handle</STRONG> (Thumb, 1438 bytes, Stack size 48 bytes, circuit_breaker_rs485_handle.o(.text.read_hold_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = read_hold_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2c4]"></a>read_hold_send_data</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, circuit_breaker_rs485_handle.o(.text.read_hold_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = read_hold_send_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2c3]"></a>read_input_register_handle</STRONG> (Thumb, 1946 bytes, Stack size 48 bytes, circuit_breaker_rs485_handle.o(.text.read_input_register_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = read_input_register_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2c2]"></a>read_input_send_data</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, circuit_breaker_rs485_handle.o(.text.read_input_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = read_input_send_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[3b5]"></a>read_lock_sensor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sensor_in_dir.o(.text.read_lock_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_lock_sensor &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3d3]"></a>read_mode</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, main.o(.text.read_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_mode &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[412]"></a>read_power_board_ac_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_ac_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_ac_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[411]"></a>read_power_board_ac_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_ac_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_ac_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[49d]"></a>read_power_board_dc1_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc1_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc1_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[49e]"></a>read_power_board_dc1_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc1_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc1_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[49f]"></a>read_power_board_dc2_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc2_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc2_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a0]"></a>read_power_board_dc2_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc2_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc2_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a1]"></a>read_power_board_dc3_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc3_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc3_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a2]"></a>read_power_board_dc3_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc3_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc3_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a3]"></a>read_power_board_dc4_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc4_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc4_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a4]"></a>read_power_board_dc4_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc4_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc4_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a5]"></a>read_power_board_dc5_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc5_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc5_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a6]"></a>read_power_board_dc5_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc5_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc5_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a7]"></a>read_power_board_dc6_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc6_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc6_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a8]"></a>read_power_board_dc6_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc6_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc6_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4a9]"></a>read_power_board_dc7_current_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc7_current_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc7_current_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4aa]"></a>read_power_board_dc7_voltage_value</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.read_power_board_dc7_voltage_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = read_power_board_dc7_voltage_value &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[4b4]"></a>read_power_board_relay_status</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, monitor_board_handle.o(.text.read_power_board_relay_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = read_power_board_relay_status
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_to_bit
</UL>

<P><STRONG><a name="[27a]"></a>read_register_autoeclosing</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, autoeclosing_rs485_handle.o(.text.read_register_autoeclosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = read_register_autoeclosing &rArr; autoeclosing_modbus_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[27b]"></a>read_register_handle</STRONG> (Thumb, 516 bytes, Stack size 40 bytes, autoeclosing_rs485_handle.o(.text.read_register_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_register_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[3e0]"></a>read_slave_data</STRONG> (Thumb, 264 bytes, Stack size 80 bytes, monitor_board_handle.o(.text.read_slave_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = read_slave_data &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[3b2]"></a>read_smoke_sensor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sensor_in_dir.o(.text.read_smoke_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_smoke_sensor &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3b6]"></a>read_spd_sensor</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sensor_in_dir.o(.text.read_spd_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_spd_sensor &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[4ab]"></a>read_userReg_webContent</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, http_server.o(.text.read_userReg_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_userReg_webContent &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[3b3]"></a>read_water_sensor</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sensor_in_dir.o(.text.read_water_sensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = read_water_sensor &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[309]"></a>read_write_device_id_flash</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_device_id_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_device_id_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[30e]"></a>read_write_high_humi_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_high_humi_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_high_humi_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
</UL>

<P><STRONG><a name="[30c]"></a>read_write_high_temp_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_high_temp_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_high_temp_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
</UL>

<P><STRONG><a name="[316]"></a>read_write_local_dhcp_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_local_dhcp_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_local_dhcp_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[313]"></a>read_write_local_dns_flash</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_local_dns_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_local_dns_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[312]"></a>read_write_local_gateway_flash</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_local_gateway_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_local_gateway_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[310]"></a>read_write_local_ip_flash</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_local_ip_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_local_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[314]"></a>read_write_local_mac_flash</STRONG> (Thumb, 228 bytes, Stack size 112 bytes, project_psm_control.o(.text.read_write_local_mac_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1272<LI>Call Chain = read_write_local_mac_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mac
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[311]"></a>read_write_local_mask_flash</STRONG> (Thumb, 264 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_local_mask_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_local_mask_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
</UL>

<P><STRONG><a name="[315]"></a>read_write_local_port_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_local_port_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_local_port_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[30f]"></a>read_write_low_humi_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_low_humi_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_low_humi_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
</UL>

<P><STRONG><a name="[30d]"></a>read_write_low_temp_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_low_temp_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_low_temp_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_temp_humi_info
</UL>

<P><STRONG><a name="[318]"></a>read_write_mqtt_pass_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_pass_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_pass_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[323]"></a>read_write_mqtt_pub_alarm_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_pub_alarm_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_pub_alarm_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[326]"></a>read_write_mqtt_pub_back1_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_pub_back1_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_pub_back1_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[322]"></a>read_write_mqtt_pub_sensor_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_pub_sensor_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_pub_sensor_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[321]"></a>read_write_mqtt_report_timer_flash</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, project_psm_control.o(.text.read_write_mqtt_report_timer_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1232<LI>Call Chain = read_write_mqtt_report_timer_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31b]"></a>read_write_mqtt_server1_ip_flash</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_mqtt_server1_ip_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_mqtt_server1_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31c]"></a>read_write_mqtt_server1_port_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_server1_port_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_mqtt_server1_port_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31d]"></a>read_write_mqtt_server2_ip_flash</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_mqtt_server2_ip_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_mqtt_server2_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31e]"></a>read_write_mqtt_server2_port_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_server2_port_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_mqtt_server2_port_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31f]"></a>read_write_mqtt_server3_ip_flash</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_mqtt_server3_ip_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[320]"></a>read_write_mqtt_server3_port_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_server3_port_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_mqtt_server3_port_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[319]"></a>read_write_mqtt_server_ip_flash</STRONG> (Thumb, 222 bytes, Stack size 104 bytes, project_psm_control.o(.text.read_write_mqtt_server_ip_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1264<LI>Call Chain = read_write_mqtt_server_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_sscanf
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[31a]"></a>read_write_mqtt_server_port_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_server_port_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_mqtt_server_port_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[325]"></a>read_write_mqtt_sub_alarm_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_sub_alarm_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_sub_alarm_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[324]"></a>read_write_mqtt_sub_command_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_sub_command_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_sub_command_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[317]"></a>read_write_mqtt_user_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_mqtt_user_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = read_write_mqtt_user_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
</UL>

<P><STRONG><a name="[30b]"></a>read_write_query_time_flash</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_query_time_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_query_time_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[30a]"></a>read_write_rs485_id_flash</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_rs485_id_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_rs485_id_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[328]"></a>read_write_slave_information_flash</STRONG> (Thumb, 422 bytes, Stack size 328 bytes, project_psm_control.o(.text.read_write_slave_information_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1528<LI>Call Chain = read_write_slave_information_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[327]"></a>read_write_slave_ok_flash</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, project_psm_control.o(.text.read_write_slave_ok_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 1216<LI>Call Chain = read_write_slave_ok_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[299]"></a>receive_camera_data</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, camera_dir.o(.text.receive_camera_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_clear
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_read
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_usedsize
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
</UL>

<P><STRONG><a name="[16e]"></a>recv</STRONG> (Thumb, 508 bytes, Stack size 32 bytes, w5500_socket.o(.text.recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = recv &rArr; getSn_RX_RSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_recv_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
</UL>

<P><STRONG><a name="[4e8]"></a>reg_httpServer_cbfunc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, http_server.o(.text.reg_httpServer_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_httpServer_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[3c3]"></a>reg_httpServer_webContent</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, http_server.o(.text.reg_httpServer_webContent))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = reg_httpServer_webContent &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
</UL>

<P><STRONG><a name="[4ec]"></a>reg_wizchip_cris_cbfunc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wizchip_conf.o(.text.reg_wizchip_cris_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_wizchip_cris_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_register_function
</UL>

<P><STRONG><a name="[4ed]"></a>reg_wizchip_cs_cbfunc</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, wizchip_conf.o(.text.reg_wizchip_cs_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = reg_wizchip_cs_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_register_function
</UL>

<P><STRONG><a name="[4b0]"></a>reg_wizchip_spi_cbfunc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wizchip_conf.o(.text.reg_wizchip_spi_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = reg_wizchip_spi_cbfunc &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_register_function
</UL>

<P><STRONG><a name="[4b2]"></a>reg_wizchip_spiburst_cbfunc</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = reg_wizchip_spiburst_cbfunc &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_register_function
</UL>

<P><STRONG><a name="[4b3]"></a>relay_to_bit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, eth_mqtt_handle.o(.text.relay_to_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = relay_to_bit &rArr; read_power_board_relay_status
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_relay_status
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
</UL>

<P><STRONG><a name="[3ee]"></a>report_autoeclosing_data</STRONG> (Thumb, 2116 bytes, Stack size 3288 bytes, eth_mqtt_handle.o(.text.report_autoeclosing_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3720<LI>Call Chain = report_autoeclosing_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_do_status
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_fault_opening_times
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_low_voltage_value
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_over_voltage_value
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_reclosing_times
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_creepage_current_value
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_current_value
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_autoeclosing_voltage_value
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_device_status_to_bit
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3ef]"></a>report_circuit_breaker_2p_data</STRONG> (Thumb, 6440 bytes, Stack size 3304 bytes, eth_mqtt_handle.o(.text.report_circuit_breaker_2p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3736<LI>Call Chain = report_circuit_breaker_2p_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3f0]"></a>report_circuit_breaker_4p_data</STRONG> (Thumb, 15890 bytes, Stack size 3312 bytes, eth_mqtt_handle.o(.text.report_circuit_breaker_4p_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3744<LI>Call Chain = report_circuit_breaker_4p_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3f3]"></a>report_gate_alarm</STRONG> (Thumb, 1120 bytes, Stack size 3224 bytes, eth_mqtt_handle.o(.text.report_gate_alarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = report_gate_alarm &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3ec]"></a>report_gate_data</STRONG> (Thumb, 2584 bytes, Stack size 3360 bytes, eth_mqtt_handle.o(.text.report_gate_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3792<LI>Call Chain = report_gate_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3f1]"></a>report_gate_list_ack</STRONG> (Thumb, 1312 bytes, Stack size 3280 bytes, eth_mqtt_handle.o(.text.report_gate_list_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 3712<LI>Call Chain = report_gate_list_ack &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3f2]"></a>report_gate_set_ack</STRONG> (Thumb, 596 bytes, Stack size 3224 bytes, eth_mqtt_handle.o(.text.report_gate_set_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 3656<LI>Call Chain = report_gate_set_ack &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3ed]"></a>report_power_data</STRONG> (Thumb, 4220 bytes, Stack size 3280 bytes, eth_mqtt_handle.o(.text.report_power_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 3712<LI>Call Chain = report_power_data &rArr; send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_current_value
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc7_voltage_value
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_current_value
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc6_voltage_value
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_current_value
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc5_voltage_value
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_current_value
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc4_voltage_value
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_current_value
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc3_voltage_value
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_current_value
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc2_voltage_value
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_current_value
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_dc1_voltage_value
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_current_value
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_power_board_ac_voltage_value
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_str_init
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relay_to_bit
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[38c]"></a>rtc_drv_get</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtc_drv.o(.text.rtc_drv_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = rtc_drv_get &rArr; hc32_rtc_get_time_stamp &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc32_rtc_get_time_stamp
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_time_update
</UL>

<P><STRONG><a name="[389]"></a>rtc_drv_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtc_drv.o(.text.rtc_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtc_drv_init &rArr; rtc_init &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IntCmd
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xtal32_clock_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_init
</UL>

<P><STRONG><a name="[388]"></a>rtc_drv_set_cb</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, rtc_drv.o(.text.rtc_drv_set_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rtc_drv_set_cb &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_init
</UL>

<P><STRONG><a name="[38b]"></a>rtc_drv_start</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtc_drv.o(.text.rtc_drv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtc_drv_start &rArr; RTC_Cmd
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_init
</UL>

<P><STRONG><a name="[3da]"></a>rtc_get_time</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rtc_drv.o(.text.rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rtc_get_time &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[4be]"></a>rtc_init</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, rtc_drv.o(.text.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtc_init &rArr; RTC_SetTime &rArr; RTC_ExitRwMode
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Cmd
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounterState
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_StructInit
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DeInit
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWC_VBAT_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[352]"></a>rtc_set_time</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, rtc_drv.o(.text.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtc_set_time &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_data_resolving
</UL>

<P><STRONG><a name="[3e3]"></a>search_slave_driver_id</STRONG> (Thumb, 158 bytes, Stack size 88 bytes, monitor_board_handle.o(.text.search_slave_driver_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = search_slave_driver_id &rArr; USART_UART_Trans &rArr; USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[170]"></a>send</STRONG> (Thumb, 640 bytes, Stack size 32 bytes, w5500_socket.o(.text.send))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = send &rArr; getSn_TX_FSR &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wiz_send_data
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_write
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[29b]"></a>send_camera_data</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, camera_dir.o(.text.send_camera_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = send_camera_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
</UL>

<P><STRONG><a name="[282]"></a>send_closing_off_autoeclosing</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, autoeclosing_rs485_handle.o(.text.send_closing_off_autoeclosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = send_closing_off_autoeclosing &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[280]"></a>send_closing_on_autoeclosing</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, autoeclosing_rs485_handle.o(.text.send_closing_on_autoeclosing))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = send_closing_on_autoeclosing &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[281]"></a>send_closing_on_off_handle</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, autoeclosing_rs485_handle.o(.text.send_closing_on_off_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = send_closing_on_off_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_FuncCmd
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_modbus_crc16
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
</UL>

<P><STRONG><a name="[4ca]"></a>send_cmd</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, camera_com_pro.o(.text.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_reset
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_start_photo
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_photoBuf_cls
</UL>

<P><STRONG><a name="[2a0]"></a>send_get_photo</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, camera_com_pro.o(.text.send_get_photo))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = send_get_photo &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
</UL>

<P><STRONG><a name="[3c6]"></a>send_lock_data</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lock_rs485_dir.o(.text.send_lock_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = send_lock_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
</UL>

<P><STRONG><a name="[4bc]"></a>send_message_to_cloud</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, eth_mqtt_handle.o(.text.send_message_to_cloud))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = send_message_to_cloud &rArr; MQTTPublish &rArr; waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
</UL>

<P><STRONG><a name="[2a3]"></a>send_photoBuf_cls</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, camera_com_pro.o(.text.send_photoBuf_cls))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = send_photoBuf_cls &rArr; send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
</UL>

<P><STRONG><a name="[29f]"></a>send_read_len</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, camera_com_pro.o(.text.send_read_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = send_read_len &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_receiver
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cam_write
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
</UL>

<P><STRONG><a name="[2ab]"></a>send_reset</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, camera_com_pro.o(.text.send_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = send_reset &rArr; send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[29e]"></a>send_start_photo</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, camera_com_pro.o(.text.send_start_photo))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = send_start_photo &rArr; send_cmd &rArr; cam_receiver &rArr; receive_camera_data &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSerailNumber
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
</UL>

<P><STRONG><a name="[3ad]"></a>sensor_in_io_init</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, sensor_in_dir.o(.text.sensor_in_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = sensor_in_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[1a]"></a>serial_console_flush</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, console.o(.text.serial_console_flush))
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.serial_console_funcs)
</UL>
<P><STRONG><a name="[1b]"></a>serial_console_getchar</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, console.o(.text.serial_console_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = serial_console_getchar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.serial_console_funcs)
</UL>
<P><STRONG><a name="[4cd]"></a>serial_console_init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, console.o(.text.serial_console_init))
<BR><BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stdio_init
</UL>

<P><STRONG><a name="[19]"></a>serial_console_printf</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, console.o(.text.serial_console_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = serial_console_printf &rArr; DDL_ConsoleOutputChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_ConsoleOutputChar
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.serial_console_funcs)
</UL>
<P><STRONG><a name="[1c]"></a>serial_console_putchar</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, console.o(.text.serial_console_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = serial_console_putchar &rArr; DDL_ConsoleOutputChar
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_ConsoleOutputChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> console.o(.data.serial_console_funcs)
</UL>
<P><STRONG><a name="[2c8]"></a>set_coil_send_data</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, circuit_breaker_rs485_handle.o(.text.set_coil_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = set_coil_send_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[44a]"></a>set_info</STRONG> (Thumb, 1656 bytes, Stack size 32 bytes, http_util.o(.text.set_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1296<LI>Call Chain = set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[2bb]"></a>set_lock_send_tcp_status</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lock_rs485_handle.o(.text.set_lock_send_tcp_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_lock_send_tcp_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[2bc]"></a>set_lock_tcp_rev_data</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lock_rs485_handle.o(.text.set_lock_tcp_rev_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_lock_tcp_rev_data &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[2bd]"></a>set_lock_tcp_rev_status</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lock_rs485_handle.o(.text.set_lock_tcp_rev_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = set_lock_tcp_rev_status
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
</UL>

<P><STRONG><a name="[448]"></a>set_mqttinfo</STRONG> (Thumb, 1196 bytes, Stack size 24 bytes, http_util.o(.text.set_mqttinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = set_mqttinfo &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[447]"></a>set_netinfo</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, http_util.o(.text.set_netinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 1288<LI>Call Chain = set_netinfo &rArr; read_write_local_dns_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dhcp_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inet_addr_
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[225]"></a>set_psm_conf</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, project_psm_control.o(.text.set_psm_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1152<LI>Call Chain = set_psm_conf &rArr; psm_set_val &rArr; psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_val
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_device_id_flash
</UL>

<P><STRONG><a name="[222]"></a>set_psm_conf_int</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, project_psm_control.o(.text.set_psm_conf_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1192<LI>Call Chain = set_psm_conf_int &rArr; psm_set_int &rArr; psm_set_variable_int &rArr; psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_int
</UL>
<BR>[Called By]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_int
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_ok_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dhcp_flash
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_port_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_query_time_flash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_rs485_id_flash
</UL>

<P><STRONG><a name="[449]"></a>set_temp_humi_info</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, http_util.o(.text.set_temp_humi_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 1240<LI>Call Chain = set_temp_humi_info &rArr; read_write_low_humi_flash &rArr; get_psm_conf_int &rArr; psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
</UL>

<P><STRONG><a name="[16b]"></a>setsockopt</STRONG> (Thumb, 452 bytes, Stack size 24 bytes, w5500_socket.o(.text.setsockopt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = setsockopt &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
</UL>

<P><STRONG><a name="[1be]"></a>socket</STRONG> (Thumb, 654 bytes, Stack size 32 bytes, w5500_socket.o(.text.socket))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = socket &rArr; close &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NetworkConnect
</UL>

<P><STRONG><a name="[217]"></a>soft_crc32</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, psm_crc32.o(.text.soft_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = soft_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_mac_conf
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_name_hash
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_search_index
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_write
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_metadata_crc32
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_read
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_read_layout
</UL>

<P><STRONG><a name="[212]"></a>strnlen</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strnlen.o(.text.strnlen))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strnlen
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[20b]"></a>sys_printf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, sys_stdio.o(.text.sys_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_off_autoeclosing
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_autoeclosing
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_deinit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_pubhex
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_query_state
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_topic_recv_handler
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_default_recv_handler
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_event_handler
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;demo_state_logcb
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_lock_data
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_int
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_process_init
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_process_init
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_process_init
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_process_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_process_init
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_process_init
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_process_init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_process_init
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_oled_process_init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;final_about_to_die
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_ok_flash
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_back1_flash
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_alarm_flash
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_sub_command_flash
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_alarm_flash
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pub_sensor_flash
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_port_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_port_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_port_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_port_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_pass_flash
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_user_flash
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dhcp_flash
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_port_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_humi_flash
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_humi_flash
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_low_temp_flash
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_high_temp_flash
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_query_time_flash
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_rs485_id_flash
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_device_id_flash
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_message_to_cloud
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_str
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_process_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_parameters_configuration
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_init
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_set_timeout
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_register_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_unregister_handler
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_handler_list
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_and_find_handler_by_name
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_existing_psm_object
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_comp
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_read_layout
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_event_handler
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_sim_check
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_software_reboot
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_set_rtc_time
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_set_urc_table
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_obj_wait_connect
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_obj_exec_cmd
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args_by_kw
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_parse_line_args
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line_by_kw
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_resp_get_line
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_req_parse_args
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_create_resp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_para_init
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_mqttinfo
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_netinfo
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_reg_webContent_list
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_json_start
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_buffer_limit
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_process_init
</UL>

<P><STRONG><a name="[4ac]"></a>sys_sscanf</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, project_psm_control.o(.text.sys_sscanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = sys_sscanf &rArr; vsscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
</UL>

<P><STRONG><a name="[3d1]"></a>sys_stdio_init</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, sys_stdio.o(.text.sys_stdio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sys_stdio_init &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PrintfInit
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_console_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d5]"></a>sys_time_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sys_time.o(.text.sys_time_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = sys_time_init &rArr; hwrtc_init &rArr; hwrtc_time_update &rArr; rtc_drv_get &rArr; hc32_rtc_get_time_stamp &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hwrtc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[4cc]"></a>sys_vprintf</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, sys_stdio.o(.text.sys_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>

<P><STRONG><a name="[3d0]"></a>system_clk_init</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, main.o(.text.system_clk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = system_clk_init &rArr; CLK_PLLInit &rArr; CLK_PLLCmd &rArr; CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetReadWaitCycle
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_SetWaitCycle
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SRAM_SetWaitCycle
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLInit
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLStructInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalInit
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalStructInit
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AnalogCmd
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[363]"></a>timegm</STRONG> (Thumb, 666 bytes, Stack size 32 bytes, rtc_drv.o(.text.timegm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hc32_rtc_get_time_stamp
</UL>

<P><STRONG><a name="[348]"></a>unescape_http_url</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, http_parser.o(.text.unescape_http_url))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = unescape_http_url &rArr; C2D
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;C2D
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[4d6]"></a>utils_internal_md5_process</STRONG> (Thumb, 2824 bytes, Stack size 88 bytes, soft_md5.o(.text.utils_internal_md5_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = utils_internal_md5_process
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_finish
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_update
</UL>

<P><STRONG><a name="[4d5]"></a>utils_md5_finish</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, soft_md5.o(.text.utils_md5_finish))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = utils_md5_finish &rArr; utils_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_internal_md5_process
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4d7]"></a>utils_md5_free</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, soft_md5.o(.text.utils_md5_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = utils_md5_free &rArr; utils_md5_zeroize
</UL>
<BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4d9]"></a>utils_md5_init</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, soft_md5.o(.text.utils_md5_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = utils_md5_init
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4f2]"></a>utils_md5_starts</STRONG> (Thumb, 66 bytes, Stack size 4 bytes, soft_md5.o(.text.utils_md5_starts))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = utils_md5_starts
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4da]"></a>utils_md5_update</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, soft_md5.o(.text.utils_md5_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = utils_md5_update &rArr; utils_internal_md5_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_internal_md5_process
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[44c]"></a>uxListRemove</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, list.o(.text.uxListRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
</UL>

<P><STRONG><a name="[4f9]"></a>uxTaskGetNumberOfTasks</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(.text.uxTaskGetNumberOfTasks))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[451]"></a>vListInitialise</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, list.o(.text.vListInitialise))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>

<P><STRONG><a name="[45d]"></a>vListInitialiseItem</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, list.o(.text.vListInitialiseItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vListInitialiseItem
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[44d]"></a>vListInsert</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, list.o(.text.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[4dd]"></a>vListInsertEnd</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, list.o(.text.vListInsertEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[332]"></a>vPortEnterCritical</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, port.o(.text.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_CrisEnter
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical_section
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_enter_critical_section
</UL>

<P><STRONG><a name="[333]"></a>vPortExitCritical</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, port.o(.text.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_CrisExit
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_exit_critical_section
</UL>

<P><STRONG><a name="[2e0]"></a>vPortFree</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, heap_4.o(.text.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_stop
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash_same_device_rw
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_reset_index
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_remove_index_entry
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_free
</UL>

<P><STRONG><a name="[4f3]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, port.o(.text.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4f8]"></a>vPortValidateInterruptPriority</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, port.o(.text.vPortValidateInterruptPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[452]"></a>vQueueAddToRegistry</STRONG> (Thumb, 182 bytes, Stack size 20 bytes, queue.o(.text.vQueueAddToRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vQueueAddToRegistry
</UL>
<BR>[Called By]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[2e2]"></a>vQueueDelete</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, queue.o(.text.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_delete
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_delete
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_sem_deinit
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_mutex_deinit
</UL>

<P><STRONG><a name="[4db]"></a>vQueueUnregisterQueue</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, queue.o(.text.vQueueUnregisterQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vQueueUnregisterQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>

<P><STRONG><a name="[46a]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, queue.o(.text.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[2e3]"></a>vTaskDelay</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_sleep
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
</UL>

<P><STRONG><a name="[3f4]"></a>vTaskDelete</STRONG> (Thumb, 340 bytes, Stack size 24 bytes, tasks.o(.text.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_delete
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[4f7]"></a>vTaskInternalSetTimeOutState</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, tasks.o(.text.vTaskInternalSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[46f]"></a>vTaskMissedYield</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(.text.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[4df]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, tasks.o(.text.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[4dc]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, tasks.o(.text.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[4e0]"></a>vTaskPriorityDisinheritAfterTimeout</STRONG> (Thumb, 386 bytes, Stack size 48 bytes, tasks.o(.text.vTaskPriorityDisinheritAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskPriorityDisinheritAfterTimeout &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[16a]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tasks.o(.text.vTaskSetTimeOutState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vTaskSetTimeOutState &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdownMS
</UL>

<P><STRONG><a name="[427]"></a>vTaskStartScheduler</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, tasks.o(.text.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[43e]"></a>vTaskSuspend</STRONG> (Thumb, 378 bytes, Stack size 32 bytes, tasks.o(.text.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self_complete
</UL>

<P><STRONG><a name="[468]"></a>vTaskSuspendAll</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tasks.o(.text.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[10a]"></a>vTaskSwitchContext</STRONG> (Thumb, 190 bytes, Stack size 20 bytes, tasks.o(.text.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
</UL>

<P><STRONG><a name="[3a7]"></a>verify_json_start</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, json_generator.o(.text.verify_json_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = verify_json_start &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
</UL>

<P><STRONG><a name="[fb]"></a>w5500_CrisEnter</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_dir.o(.text.w5500_CrisEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w5500_CrisEnter &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[fc]"></a>w5500_CrisExit</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, w5500_dir.o(.text.w5500_CrisExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w5500_CrisExit &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[fa]"></a>w5500_control_thread</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, eth_handle.o(.text.w5500_control_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = w5500_control_thread &rArr; httpServer_run &rArr; http_process_handler &rArr; http_post_cgi_handler &rArr; predefined_set_cgi_processor &rArr; set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_process_init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_parameters_configuration
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadwebpages
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_httpServer_cbfunc
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_init
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_register_function
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_spi_init
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_io_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_handle.o(.text.w5500_process_init)
</UL>
<P><STRONG><a name="[fe]"></a>w5500_cs_deselect</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500_dir.o(.text.w5500_cs_deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w5500_cs_deselect &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[fd]"></a>w5500_cs_select</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, w5500_dir.o(.text.w5500_cs_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = w5500_cs_select &rArr; GPIO_ResetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[4e4]"></a>w5500_io_init</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, w5500_dir.o(.text.w5500_io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = w5500_io_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetFunc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[4e9]"></a>w5500_network_init</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, eth_handle.o(.text.w5500_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = w5500_network_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[4ea]"></a>w5500_parameters_configuration</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, w5500_dir.o(.text.w5500_parameters_configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = w5500_parameters_configuration &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[3d8]"></a>w5500_process_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, eth_handle.o(.text.w5500_process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = w5500_process_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[101]"></a>w5500_read_buff</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, w5500_dir.o(.text.w5500_read_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = w5500_read_buff &rArr; SPI_Receive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[ff]"></a>w5500_read_byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, w5500_dir.o(.text.w5500_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = w5500_read_byte &rArr; SPI_Receive &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[4e7]"></a>w5500_register_function</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, w5500_dir.o(.text.w5500_register_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = w5500_register_function &rArr; reg_wizchip_spiburst_cbfunc &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cs_cbfunc
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_cris_cbfunc
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[4e6]"></a>w5500_reset</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, w5500_dir.o(.text.w5500_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = w5500_reset &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetPins
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetPins
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[4e5]"></a>w5500_spi_init</STRONG> (Thumb, 114 bytes, Stack size 80 bytes, w5500_dir.o(.text.w5500_spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = w5500_spi_init &rArr; SPI_DelayTimeConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayStructInit
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DelayTimeConfig
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
</UL>

<P><STRONG><a name="[102]"></a>w5500_write_buff</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, w5500_dir.o(.text.w5500_write_buff))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = w5500_write_buff &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[100]"></a>w5500_write_byte</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, w5500_dir.o(.text.w5500_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = w5500_write_byte &rArr; SPI_Trans &rArr; SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Trans
</UL>
<BR>[Address Reference Count : 1]<UL><LI> w5500_dir.o(.text.w5500_register_function)
</UL>
<P><STRONG><a name="[18f]"></a>waitfor</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, eth_to_mqtt.o(.text.waitfor))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = waitfor &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
</UL>

<P><STRONG><a name="[366]"></a>wdt_drv_set_timeout</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, wdt_drv.o(.text.wdt_drv_set_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = wdt_drv_set_timeout &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[367]"></a>wdt_drv_start</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdt_drv.o(.text.wdt_drv_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_drv_start
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[36d]"></a>wdt_drv_strobe</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, wdt_drv.o(.text.wdt_drv_strobe))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wdt_drv_strobe
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SWDT_FeedDog
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[4af]"></a>wiz_recv_data</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, w5500.o(.text.wiz_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wiz_recv_data &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
</UL>

<P><STRONG><a name="[4c9]"></a>wiz_send_data</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, w5500.o(.text.wiz_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = wiz_send_data &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
</UL>

<P><STRONG><a name="[6]"></a>wizchip_bus_readdata</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, wizchip_conf.o(.text.wizchip_bus_readdata))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wizchip_bus_readdata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[7]"></a>wizchip_bus_writedata</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_bus_writedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_bus_writedata
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[2f8]"></a>wizchip_clrinterrupt</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_clrinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_clrinterrupt &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2]"></a>wizchip_cris_enter</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_enter))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[3]"></a>wizchip_cris_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cris_exit))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cris_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[5]"></a>wizchip_cs_deselect</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_deselect))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[4]"></a>wizchip_cs_select</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_cs_select))
<BR>[Address Reference Count : 2]<UL><LI> wizchip_conf.o(.text.reg_wizchip_cs_cbfunc)
<LI> wizchip_conf.o(.data.WIZCHIP)
</UL>
<P><STRONG><a name="[2f9]"></a>wizchip_getinterrupt</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_getinterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_getinterrupt &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2fb]"></a>wizchip_getinterruptmask</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_getinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_getinterruptmask &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2f0]"></a>wizchip_getnetinfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_getnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wizchip_getnetinfo &rArr; WIZCHIP_READ_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[2f2]"></a>wizchip_getnetmode</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_getnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = wizchip_getnetmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[2f4]"></a>wizchip_gettimeout</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_gettimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_gettimeout &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[2f7]"></a>wizchip_init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, wizchip_conf.o(.text.wizchip_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = wizchip_init &rArr; wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_sw_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
</UL>

<P><STRONG><a name="[2fa]"></a>wizchip_setinterruptmask</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setinterruptmask))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_setinterruptmask &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2ef]"></a>wizchip_setnetinfo</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setnetinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = wizchip_setnetinfo &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[2f1]"></a>wizchip_setnetmode</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_setnetmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_setnetmode &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[2f3]"></a>wizchip_settimeout</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizchip_settimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizchip_settimeout &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlnetwork
</UL>

<P><STRONG><a name="[f5]"></a>wizchip_spi_readburst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_spi_readburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_spi_readburst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[f3]"></a>wizchip_spi_readbyte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wizchip_conf.o(.text.wizchip_spi_readbyte))
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[f6]"></a>wizchip_spi_writeburst</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, wizchip_conf.o(.text.wizchip_spi_writeburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = wizchip_spi_writeburst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spiburst_cbfunc)
</UL>
<P><STRONG><a name="[f4]"></a>wizchip_spi_writebyte</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, wizchip_conf.o(.text.wizchip_spi_writebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = wizchip_spi_writebyte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wizchip_conf.o(.text.reg_wizchip_spi_cbfunc)
</UL>
<P><STRONG><a name="[2f6]"></a>wizchip_sw_reset</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, wizchip_conf.o(.text.wizchip_sw_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = wizchip_sw_reset &rArr; WIZCHIP_WRITE_BUF
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE_BUF
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ_BUF
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizchip_init
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2fe]"></a>wizphy_getphyconf</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, wizchip_conf.o(.text.wizphy_getphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wizphy_getphyconf &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[301]"></a>wizphy_getphylink</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_getphylink))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_getphylink &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[300]"></a>wizphy_getphypmode</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_getphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_getphypmode &rArr; WIZCHIP_READ
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2fc]"></a>wizphy_reset</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphypmode
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_setphyconf
</UL>

<P><STRONG><a name="[2fd]"></a>wizphy_setphyconf</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_setphyconf))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wizphy_setphyconf &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[2ff]"></a>wizphy_setphypmode</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, wizchip_conf.o(.text.wizphy_setphypmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = wizphy_setphypmode &rArr; wizphy_reset &rArr; WIZCHIP_WRITE
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wizphy_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctlwizchip
</UL>

<P><STRONG><a name="[1a8]"></a>writeCString</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, mqttpacket.o(.text.writeCString))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
</UL>

<P><STRONG><a name="[1a3]"></a>writeChar</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, mqttpacket.o(.text.writeChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_zero
</UL>

<P><STRONG><a name="[1a5]"></a>writeInt</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mqttpacket.o(.text.writeInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writeInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_ack
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeMQTTString
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
</UL>

<P><STRONG><a name="[1a9]"></a>writeMQTTString</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mqttpacket.o(.text.writeMQTTString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = writeMQTTString &rArr; writeCString &rArr; writeInt
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeInt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeCString
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_publish
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_unsubscribe
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_subscribe
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSerialize_connect
</UL>

<P><STRONG><a name="[2d8]"></a>write_device_name_conf</STRONG> (Thumb, 328 bytes, Stack size 280 bytes, project_psm_control.o(.text.write_device_name_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1600<LI>Call Chain = write_device_name_conf &rArr; add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_free
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_finish
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_update
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_starts
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_init
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetUID
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
</UL>

<P><STRONG><a name="[2d9]"></a>write_eth_mac_conf</STRONG> (Thumb, 240 bytes, Stack size 136 bytes, project_psm_control.o(.text.write_eth_mac_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1456<LI>Call Chain = write_eth_mac_conf &rArr; add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EFM_GetUID
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
</UL>

<P><STRONG><a name="[2cb]"></a>write_hold_handle</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, circuit_breaker_rs485_handle.o(.text.write_hold_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = write_hold_handle &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2ca]"></a>write_hold_send_data</STRONG> (Thumb, 1594 bytes, Stack size 32 bytes, circuit_breaker_rs485_handle.o(.text.write_hold_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = write_hold_send_data &rArr; USART_WriteData
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WriteData
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_modbus_crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
</UL>

<P><STRONG><a name="[2da]"></a>write_slave_conf</STRONG> (Thumb, 170 bytes, Stack size 312 bytes, project_psm_control.o(.text.write_slave_conf))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = write_slave_conf &rArr; add_psm_entry_str &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_int
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_psm_entry_str
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conf_default_psm
</UL>

<P><STRONG><a name="[3db]"></a>xPortGetFreeHeapSize</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, heap_4.o(.text.xPortGetFreeHeapSize))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[4e2]"></a>xPortStartScheduler</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, port.o(.text.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = xPortStartScheduler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvPortStartFirstTask
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnableVFP
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[1ba]"></a>xQueueCreateMutex</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, queue.o(.text.xQueueCreateMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexInit
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_create
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_mutex_init
</UL>

<P><STRONG><a name="[2b3]"></a>xQueueGenericCreate</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, queue.o(.text.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_rs232_init
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nbiot_uart_init
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_sem_init
</UL>

<P><STRONG><a name="[45a]"></a>xQueueGenericReset</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, queue.o(.text.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[1bc]"></a>xQueueGenericSend</STRONG> (Thumb, 556 bytes, Stack size 80 bytes, queue.o(.text.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexUnlock
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseMutex
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_create
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_put
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_sem_release
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_mutex_unlock
</UL>

<P><STRONG><a name="[1f1]"></a>xQueueGiveFromISR</STRONG> (Thumb, 344 bytes, Stack size 72 bytes, queue.o(.text.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART6_RxTimeout_IrqCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_RxTimeout_IrqCallback
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
</UL>

<P><STRONG><a name="[465]"></a>xQueueReceive</STRONG> (Thumb, 476 bytes, Stack size 64 bytes, queue.o(.text.xQueueReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[43c]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 318 bytes, Stack size 72 bytes, queue.o(.text.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetNumberOfTasks
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
</UL>

<P><STRONG><a name="[1bb]"></a>xQueueSemaphoreTake</STRONG> (Thumb, 528 bytes, Stack size 64 bytes, queue.o(.text.xQueueSemaphoreTake))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityDisinheritAfterTimeout
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityInherit
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetDisinheritPriorityAfterTimeout
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MutexLock
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;receive_camera_data
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mutex_get
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_sem_take
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_mutex_lock
</UL>

<P><STRONG><a name="[16f]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 210 bytes, Stack size 40 bytes, tasks.o(.text.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskInternalSetTimeOutState
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_write
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FreeRTOS_read
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[423]"></a>xTaskCreate</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, tasks.o(.text.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_create
</UL>

<P><STRONG><a name="[4f6]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 56 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetSchedulerState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetSchedulerState
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[2e6]"></a>xTaskGetTickCount</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, tasks.o(.text.xTaskGetTickCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ticks_get
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sysdep_time
</UL>

<P><STRONG><a name="[443]"></a>xTaskGetTickCountFromISR</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tasks.o(.text.xTaskGetTickCountFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortValidateInterruptPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ticks_get
</UL>

<P><STRONG><a name="[1e7]"></a>xTaskIncrementTick</STRONG> (Thumb, 566 bytes, Stack size 48 bytes, tasks.o(.text.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[457]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, tasks.o(.text.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[4fb]"></a>xTaskPriorityInherit</STRONG> (Thumb, 348 bytes, Stack size 24 bytes, tasks.o(.text.xTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskPriorityInherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[46e]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, tasks.o(.text.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>

<P><STRONG><a name="[469]"></a>xTaskResumeAll</STRONG> (Thumb, 546 bytes, Stack size 40 bytes, tasks.o(.text.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[4e1]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, timers.o(.text.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[4bd]"></a>xtal32_clock_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtc_drv.o(.text.xtal32_clock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xtal32_clock_init &rArr; CLK_Xtal32Init &rArr; CLK_Xtal32Cmd &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Init
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_DelayMS
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[ea]"></a>yield_task</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, eth_mqtt_handle.o(.text.yield_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = yield_task &rArr; MQTTYield &rArr; cycle &rArr; keepalive &rArr; sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTYield
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mqtt_handle.o(.text.mqtt_process_init)
</UL>
<P><STRONG><a name="[4fd]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[51c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[51d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[158]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_AssertHandler
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_assert
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
</UL>

<P><STRONG><a name="[4ff]"></a>__0snprintf</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51e]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[51f]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[520]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[3a5]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_slave_conf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_eth_mac_conf
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_int
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_int
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_int
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_val
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_val
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_slave_information_flash
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server3_ip_flash
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server2_ip_flash
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server1_ip_flash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_server_ip_flash
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mac_flash
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_dns_flash
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_gateway_flash
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_mask_flash
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_local_ip_flash
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[500]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[521]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[522]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[523]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[237]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_4p_data
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_circuit_breaker_2p_data
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_power_data
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_data
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_alarm
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_list_ack
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_gate_set_ack
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;report_autoeclosing_data
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;predefined_set_cgi_processor
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_json_info
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
</UL>

<P><STRONG><a name="[501]"></a>__0vsnprintf</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[524]"></a>__1vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[525]"></a>__2vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[526]"></a>__c89vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf), UNUSED)

<P><STRONG><a name="[277]"></a>vsnprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vprintf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_vprintfln
</UL>

<P><STRONG><a name="[122]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoull
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoull
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtoll
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[527]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[345]"></a>__hardfp_atof</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, atof.o(i.__hardfp_atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[502]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[528]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[529]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[52a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[503]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>

<P><STRONG><a name="[13a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[307]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, main.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[308]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, main.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_init
</UL>

<P><STRONG><a name="[3d9]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, main.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_start
</UL>

<P><STRONG><a name="[426]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, main.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_init
</UL>

<P><STRONG><a name="[3d2]"></a>mode_init</STRONG> (Thumb, 126 bytes, Stack size 48 bytes, main.o(.text.mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = mode_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[34e]"></a>psm_get_val</STRONG> (Thumb, 90 bytes, Stack size 96 bytes, project_psm_control.o(.text.psm_get_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1128<LI>Call Chain = psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_str
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf
</UL>

<P><STRONG><a name="[479]"></a>psm_get_variable_str</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, project_psm_control.o(.text.psm_get_variable_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1032<LI>Call Chain = psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
</UL>
<BR>[Called By]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_int
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_val
</UL>

<P><STRONG><a name="[489]"></a>psm_set_val</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, project_psm_control.o(.text.psm_set_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 1120<LI>Call Chain = psm_set_val &rArr; psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_str
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf
</UL>

<P><STRONG><a name="[48a]"></a>psm_set_variable_str</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, project_psm_control.o(.text.psm_set_variable_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024<LI>Call Chain = psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_int
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_val
</UL>

<P><STRONG><a name="[34f]"></a>psm_get_int</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, project_psm_control.o(.text.psm_get_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1176<LI>Call Chain = psm_get_int &rArr; psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_int
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_psm_conf_int
</UL>

<P><STRONG><a name="[478]"></a>psm_get_variable_int</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, project_psm_control.o(.text.psm_get_variable_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1080<LI>Call Chain = psm_get_variable_int &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable_str
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_int
</UL>

<P><STRONG><a name="[487]"></a>psm_set_int</STRONG> (Thumb, 86 bytes, Stack size 96 bytes, project_psm_control.o(.text.psm_set_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1160<LI>Call Chain = psm_set_int &rArr; psm_set_variable_int &rArr; psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_int
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_psm_conf_int
</UL>

<P><STRONG><a name="[488]"></a>psm_set_variable_int</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, project_psm_control.o(.text.psm_set_variable_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 1064<LI>Call Chain = psm_set_variable_int &rArr; psm_set_variable_str &rArr; psm_set_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable_str
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_int
</UL>

<P><STRONG><a name="[428]"></a>os_mem_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, project_psm_control.o(.text.os_mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = os_mem_calloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_device_name_conf
</UL>

<P><STRONG><a name="[4ad]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, project_psm_control.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
</UL>

<P><STRONG><a name="[43f]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, project_psm_control.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_write_mqtt_report_timer_flash
</UL>

<P><STRONG><a name="[d5]"></a>USART3_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, gps_control.o(.text.USART3_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps_control.o(.text.gps_init)
</UL>
<P><STRONG><a name="[d6]"></a>USART3_RxFull_IrqCallback</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, gps_control.o(.text.USART3_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_RxFull_IrqCallback &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gps_control.o(.text.gps_init)
</UL>
<P><STRONG><a name="[171]"></a>GetComma</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, gps_control.o(.text.GetComma))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetComma
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_parse
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_int_number
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_double_number
</UL>

<P><STRONG><a name="[343]"></a>get_double_number</STRONG> (Thumb, 52 bytes, Stack size 160 bytes, gps_control.o(.text.get_double_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = get_double_number &rArr; __hardfp_atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_parse
</UL>

<P><STRONG><a name="[359]"></a>UTC2BTC</STRONG> (Thumb, 334 bytes, Stack size 4 bytes, gps_control.o(.text.UTC2BTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UTC2BTC
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_parse
</UL>

<P><STRONG><a name="[34c]"></a>get_int_number</STRONG> (Thumb, 64 bytes, Stack size 160 bytes, gps_control.o(.text.get_int_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = get_int_number &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetComma
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_parse
</UL>

<P><STRONG><a name="[3ae]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, key_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3af]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, key_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_control_thread
</UL>

<P><STRONG><a name="[3bc]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, key_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_process_init
</UL>

<P><STRONG><a name="[e0]"></a>USART2_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lock_rs485_handle.o(.text.USART2_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_rs485_handle.o(.text.lock_control_thread)
</UL>
<P><STRONG><a name="[e1]"></a>USART2_RxFull_IrqCallback</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lock_rs485_handle.o(.text.USART2_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART2_RxFull_IrqCallback &rArr; USART_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_rs485_handle.o(.text.lock_control_thread)
</UL>
<P><STRONG><a name="[e2]"></a>USART2_RxTimeout_IrqCallback</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lock_rs485_handle.o(.text.USART2_RxTimeout_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART2_RxTimeout_IrqCallback &rArr; TMR0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lock_rs485_handle.o(.text.lock_control_thread)
</UL>
<P><STRONG><a name="[3c7]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lock_rs485_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
</UL>

<P><STRONG><a name="[3c8]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lock_rs485_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_control_thread
</UL>

<P><STRONG><a name="[3ce]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, lock_rs485_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_process_init
</UL>

<P><STRONG><a name="[e5]"></a>USART4_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.USART4_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_board_handle.o(.text.modbus_control_thread)
</UL>
<P><STRONG><a name="[e6]"></a>USART4_RxFull_IrqCallback</STRONG> (Thumb, 2724 bytes, Stack size 24 bytes, monitor_board_handle.o(.text.USART4_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART4_RxFull_IrqCallback &rArr; modbus_crc16
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_crc16
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> monitor_board_handle.o(.text.modbus_control_thread)
</UL>
<P><STRONG><a name="[3e1]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, monitor_board_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[3e2]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, monitor_board_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_control_thread
</UL>

<P><STRONG><a name="[3e4]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, monitor_board_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modbus_process_init
</UL>

<P><STRONG><a name="[3fc]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, nb_iot_mqtt_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[3fd]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, nb_iot_mqtt_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[401]"></a>os_thread_delete</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, nb_iot_mqtt_handle.o(.text.os_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_thread_delete &rArr; vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_control_thread
</UL>

<P><STRONG><a name="[402]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, nb_iot_mqtt_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_mqtt_process_init
</UL>

<P><STRONG><a name="[40c]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, oled_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[40d]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, oled_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_control_thread
</UL>

<P><STRONG><a name="[32f]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, oled_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_oled_process_init
</UL>

<P><STRONG><a name="[27c]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, autoeclosing_rs485_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
</UL>

<P><STRONG><a name="[27d]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, autoeclosing_rs485_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_control_thread
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_closing_on_off_handle
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_do_handle
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_register_handle
</UL>

<P><STRONG><a name="[c6]"></a>USART7_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, autoeclosing_rs485_handle.o(.text.USART7_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART7_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
</UL>
<P><STRONG><a name="[c7]"></a>USART7_RxFull_IrqCallback</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, autoeclosing_rs485_handle.o(.text.USART7_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART7_RxFull_IrqCallback &rArr; USART_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
</UL>
<P><STRONG><a name="[c8]"></a>USART7_RxTimeout_IrqCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, autoeclosing_rs485_handle.o(.text.USART7_RxTimeout_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART7_RxTimeout_IrqCallback &rArr; TMR0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> autoeclosing_rs485_handle.o(.text.autoeclosing_control_thread)
</UL>
<P><STRONG><a name="[28a]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, autoeclosing_rs485_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_process_init
</UL>

<P><STRONG><a name="[2a8]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, camera_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_control_thread
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[2a9]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, camera_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_control_thread
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_control_thread
</UL>

<P><STRONG><a name="[2b1]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, camera_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_process_init
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_tcpc_init
</UL>

<P><STRONG><a name="[32c]"></a>isTopicMatched</STRONG> (Thumb, 264 bytes, Stack size 36 bytes, eth_to_mqtt.o(.text.isTopicMatched))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = isTopicMatched
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[32d]"></a>NewMessageData</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, eth_to_mqtt.o(.text.NewMessageData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NewMessageData
</UL>
<BR>[Called By]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deliverMessage
</UL>

<P><STRONG><a name="[18e]"></a>sendPacket</STRONG> (Thumb, 168 bytes, Stack size 48 bytes, eth_to_mqtt.o(.text.sendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = sendPacket &rArr; TimerIsExpired &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerIsExpired
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTDisconnect
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTConnectWithResults
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;keepalive
</UL>

<P><STRONG><a name="[302]"></a>readPacket</STRONG> (Thumb, 260 bytes, Stack size 64 bytes, eth_to_mqtt.o(.text.readPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = readPacket &rArr; TimerLeftMS &rArr; xTaskCheckForTimeOut &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPacket_encode
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decodePacket
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerLeftMS
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCountdown
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cycle
</UL>

<P><STRONG><a name="[498]"></a>decodePacket</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, eth_to_mqtt.o(.text.decodePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = decodePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readPacket
</UL>

<P><STRONG><a name="[1a0]"></a>getNextPacketId</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, eth_to_mqtt.o(.text.getNextPacketId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getNextPacketId
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTPublish
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTUnsubscribe
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MQTTSubscribeWithResults
</UL>

<P><STRONG><a name="[4eb]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, eth_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
</UL>

<P><STRONG><a name="[440]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eth_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_control_thread
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_network_init
</UL>

<P><STRONG><a name="[f9]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, eth_handle.o(.text.__NVIC_SystemReset))
<BR>[Address Reference Count : 1]<UL><LI> eth_handle.o(.text.w5500_control_thread)
</UL>
<P><STRONG><a name="[43d]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, eth_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_process_init
</UL>

<P><STRONG><a name="[3ea]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, eth_mqtt_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[3eb]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, eth_mqtt_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yield_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_control_thread
</UL>

<P><STRONG><a name="[e8]"></a>mqtt_subscribe_command</STRONG> (Thumb, 4834 bytes, Stack size 1344 bytes, eth_mqtt_handle.o(.text.mqtt_subscribe_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 1632<LI>Call Chain = mqtt_subscribe_command &rArr; parse_str &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_release_composite_object
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_composite_object
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_stop
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_str
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atof
</UL>
<BR>[Address Reference Count : 1]<UL><LI> eth_mqtt_handle.o(.text.mqtt_control_thread)
</UL>
<P><STRONG><a name="[3f7]"></a>parse_str</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, eth_mqtt_handle.o(.text.parse_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = parse_str &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_val_str_len
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_val_str
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_subscribe_command
</UL>

<P><STRONG><a name="[3f6]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, eth_mqtt_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mqtt_process_init
</UL>

<P><STRONG><a name="[2cc]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, circuit_breaker_rs485_handle.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
</UL>

<P><STRONG><a name="[2cd]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, circuit_breaker_rs485_handle.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_control_thread
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_input_register_handle
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_discrete_handle
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_hold_handle
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_hold_handle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_coil_handle
</UL>

<P><STRONG><a name="[d0]"></a>circuit_breaker_USART7_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = circuit_breaker_USART7_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
</UL>
<P><STRONG><a name="[d1]"></a>circuit_breaker_USART7_RxFull_IrqCallback</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = circuit_breaker_USART7_RxFull_IrqCallback &rArr; USART_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
</UL>
<P><STRONG><a name="[d2]"></a>circuit_breaker_USART7_RxTimeout_IrqCallback</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, circuit_breaker_rs485_handle.o(.text.circuit_breaker_USART7_RxTimeout_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = circuit_breaker_USART7_RxTimeout_IrqCallback &rArr; TMR0_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> circuit_breaker_rs485_handle.o(.text.circuit_breaker_control_thread)
</UL>
<P><STRONG><a name="[2d3]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, circuit_breaker_rs485_handle.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_process_init
</UL>

<P><STRONG><a name="[17e]"></a>SRAM_REG_Lock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32_ll.o(.text.SRAM_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[178]"></a>SRAM_REG_Unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hc32_ll.o(.text.SRAM_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[174]"></a>EFM_REG_Unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, hc32_ll.o(.text.EFM_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[175]"></a>PWC_FCG0_REG_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(.text.PWC_FCG0_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[176]"></a>GPIO_REG_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll.o(.text.GPIO_REG_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[177]"></a>PWC_REG_Unlock</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, hc32_ll.o(.text.PWC_REG_Unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWC_REG_Unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WE
</UL>

<P><STRONG><a name="[17a]"></a>EFM_REG_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hc32_ll.o(.text.EFM_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[17b]"></a>PWC_FCG0_REG_Lock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hc32_ll.o(.text.PWC_FCG0_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[17c]"></a>GPIO_REG_Lock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, hc32_ll.o(.text.GPIO_REG_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[17d]"></a>PWC_REG_Lock</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, hc32_ll.o(.text.PWC_REG_Lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = PWC_REG_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PERIPH_WP
</UL>

<P><STRONG><a name="[14f]"></a>CLK_Delay</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hc32_ll_clk.o(.text.CLK_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Xtal32Cmd
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockDiv
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockSrc
</UL>

<P><STRONG><a name="[146]"></a>CLK_WaitStable</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hc32_ll_clk.o(.text.CLK_WaitStable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = CLK_WaitStable &rArr; CLK_GetStableStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetStableStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_PLLCmd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_XtalCmd
</UL>

<P><STRONG><a name="[14c]"></a>SetSysClockSrc</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, hc32_ll_clk.o(.text.SetSysClockSrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetSysClockSrc &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetSysClockSrc
</UL>

<P><STRONG><a name="[149]"></a>SetSysClockDiv</STRONG> (Thumb, 358 bytes, Stack size 40 bytes, hc32_ll_clk.o(.text.SetSysClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SetSysClockDiv &rArr; CLK_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetClockDiv
</UL>

<P><STRONG><a name="[1df]"></a>SPI_Tx</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, hc32_ll_spi.o(.text.SPI_Tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPI_Tx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Trans
</UL>

<P><STRONG><a name="[1dd]"></a>SPI_TxRx</STRONG> (Thumb, 348 bytes, Stack size 56 bytes, hc32_ll_spi.o(.text.SPI_TxRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SPI_TxRx &rArr; SPI_WaitStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Trans
</UL>

<P><STRONG><a name="[1e0]"></a>SPI_WaitStatus</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, hc32_ll_spi.o(.text.SPI_WaitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI_WaitStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TxRx
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Tx
</UL>

<P><STRONG><a name="[1f7]"></a>USART_GetUsartClockFreq</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, hc32_ll_usart.o(.text.USART_GetUsartClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_GetUsartClockFreq &rArr; USART_GetUsartClockDiv &rArr; USART_GetClockDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockDiv
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1eb]"></a>UART_CalculateDiv</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.UART_CalculateDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UART_CalculateDiv &rArr; UART_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivInteger
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDivFraction
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1e2]"></a>SmartCard_CalculateDiv</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.SmartCard_CalculateDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SmartCard_CalculateDiv &rArr; SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivInteger
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDivFraction
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[155]"></a>ClockSync_CalculateDiv</STRONG> (Thumb, 128 bytes, Stack size 40 bytes, hc32_ll_usart.o(.text.ClockSync_CalculateDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ClockSync_CalculateDiv &rArr; ClockSync_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivInteger
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDivFraction
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetBaudrate
</UL>

<P><STRONG><a name="[1f8]"></a>USART_GetBusClockFreq</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hc32_ll_usart.o(.text.USART_GetBusClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetBusClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>

<P><STRONG><a name="[1f5]"></a>USART_GetUsartClockDiv</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, hc32_ll_usart.o(.text.USART_GetUsartClockDiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_GetUsartClockDiv &rArr; USART_GetClockDiv
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetClockDiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetUsartClockFreq
</UL>

<P><STRONG><a name="[1ec]"></a>UART_CalculateDivFraction</STRONG> (Thumb, 386 bytes, Stack size 80 bytes, hc32_ll_usart.o(.text.UART_CalculateDivFraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = UART_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDiv
</UL>

<P><STRONG><a name="[1ed]"></a>UART_CalculateDivInteger</STRONG> (Thumb, 282 bytes, Stack size 72 bytes, hc32_ll_usart.o(.text.UART_CalculateDivInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UART_CalculateDivInteger &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CalculateDiv
</UL>

<P><STRONG><a name="[1e3]"></a>SmartCard_CalculateDivFraction</STRONG> (Thumb, 376 bytes, Stack size 96 bytes, hc32_ll_usart.o(.text.SmartCard_CalculateDivFraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SmartCard_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDiv
</UL>

<P><STRONG><a name="[1e4]"></a>SmartCard_CalculateDivInteger</STRONG> (Thumb, 300 bytes, Stack size 88 bytes, hc32_ll_usart.o(.text.SmartCard_CalculateDivInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SmartCard_CalculateDivInteger &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SmartCard_CalculateDiv
</UL>

<P><STRONG><a name="[156]"></a>ClockSync_CalculateDivFraction</STRONG> (Thumb, 320 bytes, Stack size 80 bytes, hc32_ll_usart.o(.text.ClockSync_CalculateDivFraction))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ClockSync_CalculateDivFraction &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDiv
</UL>

<P><STRONG><a name="[157]"></a>ClockSync_CalculateDivInteger</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, hc32_ll_usart.o(.text.ClockSync_CalculateDivInteger))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = ClockSync_CalculateDivInteger &rArr; __aeabi_ul2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClockSync_CalculateDiv
</UL>

<P><STRONG><a name="[1fc]"></a>USART_WaitStatus</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, hc32_ll_usart.o(.text.USART_WaitStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART_WaitStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_UART_Trans
</UL>

<P><STRONG><a name="[1e5]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hc32_ll_utility.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>

<P><STRONG><a name="[1e6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hc32_ll_utility.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>

<P><STRONG><a name="[15a]"></a>LL_GetPrintTimeout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.LL_GetPrintTimeout))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_ConsoleOutputChar
</UL>

<P><STRONG><a name="[15b]"></a>LL_GetPrintDevice</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hc32_ll_utility.o(.text.LL_GetPrintDevice))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DDL_ConsoleOutputChar
</UL>

<P><STRONG><a name="[180]"></a>LL_SetPrintDevice</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hc32_ll_utility.o(.text.LL_SetPrintDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetPrintDevice
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PrintfInit
</UL>

<P><STRONG><a name="[181]"></a>LL_SetPrintTimeout</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, hc32_ll_utility.o(.text.LL_SetPrintTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetPrintTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PrintfInit
</UL>

<P><STRONG><a name="[336]"></a>os_mutex_get</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, flash_drv.o(.text.os_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_mutex_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_read
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_erase
</UL>

<P><STRONG><a name="[337]"></a>os_mutex_put</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, flash_drv.o(.text.os_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_read
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_erase
</UL>

<P><STRONG><a name="[339]"></a>os_mutex_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, flash_drv.o(.text.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[33a]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, flash_drv.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[33b]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, flash_drv.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_init
</UL>

<P><STRONG><a name="[1c5]"></a>QSPI_WriteDirectCommValue</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, qspi_flash.o(.text.QSPI_WriteDirectCommValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = QSPI_WriteDirectCommValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_WriteInstr
</UL>

<P><STRONG><a name="[1c6]"></a>QSPI_ReadDirectCommValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, qspi_flash.o(.text.QSPI_ReadDirectCommValue))
<BR><BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_ReadInstr
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_CheckProcessDone
</UL>

<P><STRONG><a name="[166]"></a>FLASH_GetConfigFromID</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, qspi_flash.o(.text.FLASH_GetConfigFromID))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_GetConfigFromID
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetConfig
</UL>

<P><STRONG><a name="[1c8]"></a>QSPI_FLASH_WriteInstr</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_WriteInstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QSPI_FLASH_WriteInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ExitDirectCommMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterDirectCommMode
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteDirectCommValue
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block64K
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block32K
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_EraseSector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Write
</UL>

<P><STRONG><a name="[1c9]"></a>QSPI_FLASH_WordToByte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, qspi_flash.o(.text.QSPI_FLASH_WordToByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = QSPI_FLASH_WordToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block64K
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block32K
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_EraseSector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Write
</UL>

<P><STRONG><a name="[1c3]"></a>QSPI_FLASH_CheckProcessDone</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, qspi_flash.o(.text.QSPI_FLASH_CheckProcessDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = QSPI_FLASH_CheckProcessDone &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ExitDirectCommMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterDirectCommMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ReadDirectCommValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteDirectCommValue
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block64K
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Erase_Block32K
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_EraseSector
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Write
</UL>

<P><STRONG><a name="[1cb]"></a>QSPI_FLASH_ReadInstr</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, qspi_flash.o(.text.QSPI_FLASH_ReadInstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = QSPI_FLASH_ReadInstr &rArr; QSPI_WriteDirectCommValue
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ExitDirectCommMode
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_EnterDirectCommMode
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_ReadDirectCommValue
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_WriteDirectCommValue
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_GetUniqueID
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;QSPI_FLASH_Getjedecid
</UL>

<P><STRONG><a name="[4d4]"></a>__isleap</STRONG> (Thumb, 132 bytes, Stack size 12 bytes, rtc_drv.o(.text.__isleap))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __isleap
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
</UL>

<P><STRONG><a name="[362]"></a>hc32_rtc_get_time_stamp</STRONG> (Thumb, 120 bytes, Stack size 72 bytes, rtc_drv.o(.text.hc32_rtc_get_time_stamp))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = hc32_rtc_get_time_stamp &rArr; timegm &rArr; __isleap
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetDate
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timegm
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_get
</UL>

<P><STRONG><a name="[4c0]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, rtc_drv.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[4c1]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, rtc_drv.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[4c2]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, rtc_drv.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_drv_init
</UL>

<P><STRONG><a name="[340]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w5500.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[341]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, w5500.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_RX_RSR
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSn_TX_FSR
</UL>

<P><STRONG><a name="[4ee]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w5500_dir.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
</UL>

<P><STRONG><a name="[441]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, w5500_dir.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;w5500_reset
</UL>

<P><STRONG><a name="[4b1]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, wizchip_conf.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
</UL>

<P><STRONG><a name="[442]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, wizchip_conf.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spiburst_cbfunc
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reg_wizchip_spi_cbfunc
</UL>

<P><STRONG><a name="[285]"></a>autoeclosing_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, autoeclosing_rs485_dir.o(.text.autoeclosing_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = autoeclosing_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
</UL>

<P><STRONG><a name="[28b]"></a>autoeclosing_timerout_config</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, autoeclosing_rs485_dir.o(.text.autoeclosing_timerout_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = autoeclosing_timerout_config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWClearCondCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStartCondCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_usart_init
</UL>

<P><STRONG><a name="[286]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, autoeclosing_rs485_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_irq_handler
</UL>

<P><STRONG><a name="[287]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, autoeclosing_rs485_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_irq_handler
</UL>

<P><STRONG><a name="[288]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, autoeclosing_rs485_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;autoeclosing_irq_handler
</UL>

<P><STRONG><a name="[ca]"></a>EXTINT_POWER_OFF_IrqCallback</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bat_dir.o(.text.EXTINT_POWER_OFF_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTINT_POWER_OFF_IrqCallback &rArr; bat_en_on &rArr; GPIO_SetPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_GetExtIntStatus
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_ClearExtIntStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_en_on
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_en_off
</UL>
<BR>[Address Reference Count : 1]<UL><LI> bat_dir.o(.text.bat_io_init)
</UL>
<P><STRONG><a name="[292]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bat_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[293]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, bat_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[294]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, bat_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bat_io_init
</UL>

<P><STRONG><a name="[3c9]"></a>lock_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lock_rs485_dir.o(.text.lock_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lock_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
</UL>

<P><STRONG><a name="[3cf]"></a>lock_timerout_config</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lock_rs485_dir.o(.text.lock_timerout_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lock_timerout_config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWClearCondCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStartCondCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_usart_init
</UL>

<P><STRONG><a name="[3ca]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, lock_rs485_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_irq_handler
</UL>

<P><STRONG><a name="[3cb]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lock_rs485_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_irq_handler
</UL>

<P><STRONG><a name="[3cc]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, lock_rs485_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_irq_handler
</UL>

<P><STRONG><a name="[2a1]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, camera_com_pro.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_version
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test
</UL>

<P><STRONG><a name="[2a2]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, camera_com_pro.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_app
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_version
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_test
</UL>

<P><STRONG><a name="[2ac]"></a>camera_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, camera_dir.o(.text.camera_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = camera_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
</UL>

<P><STRONG><a name="[2bf]"></a>camera_timerout_config</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, camera_dir.o(.text.camera_timerout_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = camera_timerout_config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWClearCondCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStartCondCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_usart_init
</UL>

<P><STRONG><a name="[2ad]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, camera_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_irq_handler
</UL>

<P><STRONG><a name="[2ae]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, camera_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_irq_handler
</UL>

<P><STRONG><a name="[2af]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, camera_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_irq_handler
</UL>

<P><STRONG><a name="[cc]"></a>USART1_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, camera_dir.o(.text.USART1_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera_dir.o(.text.camera_rs232_init)
</UL>
<P><STRONG><a name="[cd]"></a>USART1_RxFull_IrqCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, camera_dir.o(.text.USART1_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_RxFull_IrqCallback &rArr; camera_buf_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;camera_buf_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera_dir.o(.text.camera_rs232_init)
</UL>
<P><STRONG><a name="[ce]"></a>USART1_RxTimeout_IrqCallback</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, camera_dir.o(.text.USART1_RxTimeout_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART1_RxTimeout_IrqCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> camera_dir.o(.text.camera_rs232_init)
</UL>
<P><STRONG><a name="[355]"></a>gps_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gps_dir.o(.text.gps_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gps_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_usart_init
</UL>

<P><STRONG><a name="[356]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gps_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_irq_handler
</UL>

<P><STRONG><a name="[357]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, gps_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_irq_handler
</UL>

<P><STRONG><a name="[358]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, gps_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gps_irq_handler
</UL>

<P><STRONG><a name="[3ba]"></a>key_var</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, key_dir.o(.text.key_var))
<BR><BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[3b9]"></a>key_hard</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, key_dir.o(.text.key_hard))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = key_hard &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
</UL>

<P><STRONG><a name="[da]"></a>IsKeyDownMenu</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownMenu &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[db]"></a>IsKeyDownUp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownUp &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[dc]"></a>IsKeyDownDown</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownDown &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[dd]"></a>IsKeyDownClr</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownClr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownClr &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[de]"></a>IsKeyDownOk</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownOk &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[df]"></a>IsKeyDownRST</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, key_dir.o(.text.IsKeyDownRST))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IsKeyDownRST &rArr; GPIO_ReadInputPins
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputPins
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key_dir.o(.text.key_var)
</UL>
<P><STRONG><a name="[3b7]"></a>key_detect</STRONG> (Thumb, 306 bytes, Stack size 16 bytes, key_dir.o(.text.key_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = key_detect &rArr; put_key_value
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_key_value
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_detect_all
</UL>

<P><STRONG><a name="[3e5]"></a>monitor_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, monitor_board_dir.o(.text.monitor_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = monitor_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_usart_init
</UL>

<P><STRONG><a name="[3e6]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, monitor_board_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_irq_handler
</UL>

<P><STRONG><a name="[3e7]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, monitor_board_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_irq_handler
</UL>

<P><STRONG><a name="[3e8]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, monitor_board_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;monitor_irq_handler
</UL>

<P><STRONG><a name="[c3]"></a>USART6_RxError_IrqCallback</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, nb_uart_dir.o(.text.USART6_RxError_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART6_RxError_IrqCallback &rArr; USART_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_uart_dir.o(.text.at_uart_init)
</UL>
<P><STRONG><a name="[25c]"></a>at_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, nb_uart_dir.o(.text.at_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = at_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
</UL>

<P><STRONG><a name="[c4]"></a>USART6_RxFull_IrqCallback</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nb_uart_dir.o(.text.USART6_RxFull_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART6_RxFull_IrqCallback &rArr; at_buf_write &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReadData
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_buf_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_uart_dir.o(.text.at_uart_init)
</UL>
<P><STRONG><a name="[c5]"></a>USART6_RxTimeout_IrqCallback</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, nb_uart_dir.o(.text.USART6_RxTimeout_IrqCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = USART6_RxTimeout_IrqCallback &rArr; xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Stop
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearStatus
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> nb_uart_dir.o(.text.at_uart_init)
</UL>
<P><STRONG><a name="[269]"></a>at_timerout_config</STRONG> (Thumb, 226 bytes, Stack size 56 bytes, nb_uart_dir.o(.text.at_timerout_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = at_timerout_config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWClearCondCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStartCondCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
</UL>

<P><STRONG><a name="[25e]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, nb_uart_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>

<P><STRONG><a name="[25f]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, nb_uart_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>

<P><STRONG><a name="[260]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, nb_uart_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_irq_handler
</UL>

<P><STRONG><a name="[418]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, oled_dir.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_reset
</UL>

<P><STRONG><a name="[419]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, oled_dir.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_init
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_reset
</UL>

<P><STRONG><a name="[2ce]"></a>circuit_breaker_irq_handler</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, circuit_breaker_rs485_dir.o(.text.circuit_breaker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = circuit_breaker_irq_handler &rArr; INTC_IrqSignIn
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTC_IrqSignIn
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
</UL>

<P><STRONG><a name="[2d4]"></a>circuit_breaker_timerout_config</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, circuit_breaker_rs485_dir.o(.text.circuit_breaker_timerout_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = circuit_breaker_timerout_config &rArr; TMR0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg0PeriphClockCmd
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FCG_Fcg2PeriphClockCmd
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AOS_SetTriggerEventSrc
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWClearCondCmd
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_HWStartCondCmd
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_usart_init
</UL>

<P><STRONG><a name="[2cf]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, circuit_breaker_rs485_dir.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_irq_handler
</UL>

<P><STRONG><a name="[2d0]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, circuit_breaker_rs485_dir.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_irq_handler
</UL>

<P><STRONG><a name="[2d1]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, circuit_breaker_rs485_dir.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circuit_breaker_irq_handler
</UL>

<P><STRONG><a name="[459]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, queue.o(.text.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[458]"></a>prvInitialiseMutex</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, queue.o(.text.prvInitialiseMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>

<P><STRONG><a name="[456]"></a>prvCopyDataToQueue</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, queue.o(.text.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit &rArr; uxListRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[461]"></a>prvIsQueueFull</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueFull &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[46d]"></a>prvUnlockQueue</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, queue.o(.text.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[460]"></a>prvIsQueueEmpty</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, queue.o(.text.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvIsQueueEmpty &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[4fc]"></a>prvGetDisinheritPriorityAfterTimeout</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, queue.o(.text.prvGetDisinheritPriorityAfterTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetDisinheritPriorityAfterTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>

<P><STRONG><a name="[455]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, queue.o(.text.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvCopyDataFromQueue &rArr; __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
</UL>

<P><STRONG><a name="[45b]"></a>prvInitialiseNewTask</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, tasks.o(.text.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = prvInitialiseNewTask &rArr; pxPortInitialiseStack
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[44e]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 340 bytes, Stack size 16 bytes, tasks.o(.text.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
</UL>
<BR>[Called By]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[44f]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, tasks.o(.text.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = prvInitialiseTaskLists &rArr; vListInitialise
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[4de]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tasks.o(.text.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[454]"></a>prvDeleteTCB</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, tasks.o(.text.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[44b]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 282 bytes, Stack size 32 bytes, tasks.o(.text.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[f8]"></a>prvIdleTask</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, tasks.o(.text.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(.text.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[453]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(.text.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[450]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, timers.o(.text.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueAddToRegistry
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[103]"></a>prvTimerTask</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, timers.o(.text.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(.text.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[46c]"></a>prvGetNextExpireTime</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, timers.o(.text.prvGetNextExpireTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvGetNextExpireTime
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[467]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, timers.o(.text.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[464]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 384 bytes, Stack size 56 bytes, timers.o(.text.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = prvProcessReceivedCommands &rArr; xQueueReceive &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceive
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[466]"></a>prvSampleTimeNow</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, timers.o(.text.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[462]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, timers.o(.text.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[45f]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, timers.o(.text.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvReloadTimer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[463]"></a>prvReloadTimer</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timers.o(.text.prvReloadTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[46b]"></a>prvSwitchTimerLists</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, timers.o(.text.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = prvSwitchTimerLists &rArr; prvProcessExpiredTimer &rArr; prvReloadTimer &rArr; prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[f2]"></a>prvTaskExitError</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, port.o(.text.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvTaskExitError
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(.text.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[4f4]"></a>vPortEnableVFP</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, port.o(.text.vPortEnableVFP))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[4f5]"></a>prvPortStartFirstTask</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, port.o(.text.prvPortStartFirstTask))
<BR><BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[48e]"></a>prvHeapInit</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, heap_4.o(.text.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[48f]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 198 bytes, Stack size 12 bytes, heap_4.o(.text.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>

<P><STRONG><a name="[42a]"></a>os_mutex_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sys_os.o(.text.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_create_with_cb
</UL>

<P><STRONG><a name="[42d]"></a>os_mutex_get</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sys_os.o(.text.os_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_mutex_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_unlock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_lock
</UL>

<P><STRONG><a name="[42f]"></a>os_mutex_put</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sys_os.o(.text.os_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_unlock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_lock
</UL>

<P><STRONG><a name="[435]"></a>os_semaphore_delete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_os.o(.text.os_semaphore_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = os_semaphore_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_delete
</UL>

<P><STRONG><a name="[433]"></a>os_semaphore_create</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sys_os.o(.text.os_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = os_semaphore_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_create_with_cb
</UL>

<P><STRONG><a name="[437]"></a>os_semaphore_get</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, sys_os.o(.text.os_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = os_semaphore_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_write_lock
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_lock
</UL>

<P><STRONG><a name="[439]"></a>os_semaphore_put</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, sys_os.o(.text.os_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_semaphore_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_write_unlock
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_read_unlock
</UL>

<P><STRONG><a name="[42c]"></a>os_mutex_delete</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sys_os.o(.text.os_mutex_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = os_mutex_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_delete
</UL>

<P><STRONG><a name="[21f]"></a>os_enter_critical_section</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sys_assert.o(.text.os_enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_enter_critical_section &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_assert
</UL>

<P><STRONG><a name="[2ec]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, partition.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
</UL>

<P><STRONG><a name="[2ed]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, partition.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_layout_binary
</UL>

<P><STRONG><a name="[445]"></a>part_get_table_addr_from_id</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, partition.o(.text.part_get_table_addr_from_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = part_get_table_addr_from_id
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_init
</UL>

<P><STRONG><a name="[446]"></a>part_read_layout</STRONG> (Thumb, 420 bytes, Stack size 40 bytes, partition.o(.text.part_read_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = part_read_layout &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_read
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc32_init
</UL>
<BR>[Called By]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_init
</UL>

<P><STRONG><a name="[4d8]"></a>utils_md5_zeroize</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, soft_md5.o(.text.utils_md5_zeroize))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = utils_md5_zeroize
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;utils_md5_free
</UL>

<P><STRONG><a name="[21c]"></a>_psm_object_read</STRONG> (Thumb, 288 bytes, Stack size 72 bytes, psm_v2.o(.text._psm_object_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = _psm_object_read &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_metadata_crc32
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
</UL>

<P><STRONG><a name="[20d]"></a>psm_calc_metadata_crc32</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, psm_v2.o(.text.psm_calc_metadata_crc32))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = psm_calc_metadata_crc32 &rArr; soft_crc32
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_read
</UL>

<P><STRONG><a name="[21e]"></a>_psm_object_write</STRONG> (Thumb, 156 bytes, Stack size 48 bytes, psm_v2.o(.text._psm_object_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = _psm_object_write &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
</UL>

<P><STRONG><a name="[20e]"></a>psm_write_flash</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, psm_v2.o(.text.psm_write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_verify
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash_same_device_rw
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_swap_descriptor
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_swap_descriptor
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_double_active_object
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flag_bit
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_write
</UL>

<P><STRONG><a name="[429]"></a>os_mem_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, psm_v2.o(.text.os_mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = os_mem_calloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
</UL>

<P><STRONG><a name="[211]"></a>_psm_object_open</STRONG> (Thumb, 698 bytes, Stack size 104 bytes, psm_v2.o(.text._psm_object_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 888<LI>Call Chain = _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strnlen
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_remove_index_entry
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_unused_obj_id
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_is_objid_available
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_init_new_object
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_active_object
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_compact
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_space_constraints
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
</UL>

<P><STRONG><a name="[213]"></a>manage_space_constraints</STRONG> (Thumb, 160 bytes, Stack size 28 bytes, psm_v2.o(.text.manage_space_constraints))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = manage_space_constraints
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_physical_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[214]"></a>psm_part_compact</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, psm_v2.o(.text.psm_part_compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[216]"></a>search_active_object</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, psm_v2.o(.text.search_active_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = search_active_object &rArr; psm_search_index &rArr; read_and_match_name &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_object
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_search_index
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[218]"></a>psm_init_new_object</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, psm_v2.o(.text.psm_init_new_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = psm_init_new_object
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[219]"></a>psm_is_objid_available</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, psm_v2.o(.text.psm_is_objid_available))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psm_is_objid_available
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[21a]"></a>psm_get_unused_obj_id</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, psm_v2.o(.text.psm_get_unused_obj_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = psm_get_unused_obj_id
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[21b]"></a>psm_remove_index_entry</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, psm_v2.o(.text.psm_remove_index_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = psm_remove_index_entry &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_open
</UL>

<P><STRONG><a name="[20f]"></a>write_flag_bit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, psm_v2.o(.text.write_flag_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
</UL>

<P><STRONG><a name="[20c]"></a>_psm_object_close</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, psm_v2.o(.text._psm_object_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = _psm_object_close &rArr; psm_add_to_index &rArr; psm_calc_name_hash &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flag_bit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_metadata_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_set_variable
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_variable
</UL>

<P><STRONG><a name="[210]"></a>psm_add_to_index</STRONG> (Thumb, 416 bytes, Stack size 72 bytes, psm_v2.o(.text.psm_add_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = psm_add_to_index &rArr; psm_calc_name_hash &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_name_hash
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_psm_object_close
</UL>

<P><STRONG><a name="[424]"></a>os_enter_critical_section</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, psm_v2.o(.text.os_enter_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = os_enter_critical_section &rArr; vPortEnterCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[20a]"></a>_get_existing_psm_object</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, psm_v2.o(.text._get_existing_psm_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _get_existing_psm_object &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PSM_List_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[425]"></a>os_exit_critical_section</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, psm_v2.o(.text.os_exit_critical_section))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_exit_critical_section &rArr; vPortExitCritical
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[47e]"></a>psm_get_block_size</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, psm_v2.o(.text.psm_get_block_size))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[47f]"></a>_psm_init_verify_params</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, psm_v2.o(.text._psm_init_verify_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _psm_init_verify_params
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[47d]"></a>psm_init_locks</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, psm_v2.o(.text.psm_init_locks))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = psm_init_locks &rArr; os_rwlock_create &rArr; os_rwlock_create_with_cb &rArr; os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_create
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[480]"></a>psm_module_physical_init</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, psm_v2.o(.text.psm_module_physical_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = psm_module_physical_init &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deduce_checkpoint_at_init
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;manage_space_constraints
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[477]"></a>psm_deinit_locks</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, psm_v2.o(.text.psm_deinit_locks))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = psm_deinit_locks &rArr; os_rwlock_delete &rArr; os_mutex_delete &rArr; vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_rwlock_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[1c0]"></a>PSM_List_AddTail</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, psm_v2.o(.text.PSM_List_AddTail))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PSM_List_AddTail &rArr; _sys_assert &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_init
</UL>

<P><STRONG><a name="[1c2]"></a>PSM_List_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, psm_v2.o(.text.PSM_List_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PSM_List_Init &rArr; _sys_assert &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_existing_psm_object
</UL>

<P><STRONG><a name="[32a]"></a>deduce_checkpoint_at_init</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, psm_v2.o(.text.deduce_checkpoint_at_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = deduce_checkpoint_at_init &rArr; read_swap_descriptor &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_swap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_physical_init
</UL>

<P><STRONG><a name="[481]"></a>psm_part_scan</STRONG> (Thumb, 520 bytes, Stack size 64 bytes, psm_v2.o(.text.psm_part_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = psm_part_scan &rArr; psm_add_to_index &rArr; psm_calc_name_hash &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_is_free_space
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_double_active_object
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_and_set_bitmap
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_reset_index
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_mem_calloc
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_physical_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_compact
</UL>

<P><STRONG><a name="[35b]"></a>handle_recovery</STRONG> (Thumb, 820 bytes, Stack size 88 bytes, psm_v2.o(.text.handle_recovery))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_erase_start_offset
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invalidate_swap_descriptor
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_all_objects
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_swap_descriptor
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_get_swap_start_offset
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_erase_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_module_physical_init
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_compact
</UL>

<P><STRONG><a name="[482]"></a>psm_reset_index</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, psm_v2.o(.text.psm_reset_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = psm_reset_index &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
</UL>

<P><STRONG><a name="[35d]"></a>psm_erase_flash</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, psm_v2.o(.text.psm_erase_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = psm_erase_flash &rArr; flash_drv_erase &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_erase
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[483]"></a>test_and_set_bitmap</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, psm_v2.o(.text.test_and_set_bitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = test_and_set_bitmap
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
</UL>

<P><STRONG><a name="[35a]"></a>handle_double_active_object</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, psm_v2.o(.text.handle_double_active_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = handle_double_active_object &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_part_scan
</UL>

<P><STRONG><a name="[48c]"></a>psm_write_flash_same_device_rw</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, psm_v2.o(.text.psm_write_flash_same_device_rw))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = psm_write_flash_same_device_rw &rArr; flash_drv_write &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_drv_write
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>

<P><STRONG><a name="[48d]"></a>psm_write_verify</STRONG> (Thumb, 140 bytes, Stack size 112 bytes, psm_v2.o(.text.psm_write_verify))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>

<P><STRONG><a name="[485]"></a>psm_search_index</STRONG> (Thumb, 234 bytes, Stack size 56 bytes, psm_v2.o(.text.psm_search_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = psm_search_index &rArr; read_and_match_name &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_name
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_active_object
</UL>

<P><STRONG><a name="[499]"></a>read_and_match_object</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, psm_v2.o(.text.read_and_match_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = read_and_match_object &rArr; read_and_match_name &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_is_free_space
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_name
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;search_active_object
</UL>

<P><STRONG><a name="[35c]"></a>psm_get_swap_start_offset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, psm_v2.o(.text.psm_get_swap_start_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = psm_get_swap_start_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[35e]"></a>write_swap_descriptor</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, psm_v2.o(.text.write_swap_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = write_swap_descriptor &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[35f]"></a>psm_copy_all_objects</STRONG> (Thumb, 364 bytes, Stack size 56 bytes, psm_v2.o(.text.psm_copy_all_objects))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_is_free_space
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_object
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_upgrade_object
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[360]"></a>invalidate_swap_descriptor</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, psm_v2.o(.text.invalidate_swap_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = invalidate_swap_descriptor &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[361]"></a>get_erase_start_offset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, psm_v2.o(.text.get_erase_start_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_erase_start_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_recovery
</UL>

<P><STRONG><a name="[475]"></a>psm_upgrade_object</STRONG> (Thumb, 452 bytes, Stack size 168 bytes, psm_v2.o(.text.psm_upgrade_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flag_bit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_metadata_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_all_objects
</UL>

<P><STRONG><a name="[476]"></a>psm_copy_object</STRONG> (Thumb, 434 bytes, Stack size 160 bytes, psm_v2.o(.text.psm_copy_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = psm_copy_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flag_bit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_write_flash
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_calc_metadata_crc32
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_copy_all_objects
</UL>

<P><STRONG><a name="[486]"></a>read_and_match_name</STRONG> (Thumb, 142 bytes, Stack size 112 bytes, psm_v2.o(.text.read_and_match_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = read_and_match_name &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_and_match_object
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_search_index
</UL>

<P><STRONG><a name="[470]"></a>psm_calc_name_hash</STRONG> (Thumb, 210 bytes, Stack size 120 bytes, psm_v2.o(.text.psm_calc_name_hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = psm_calc_name_hash &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_crc32
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_add_to_index
</UL>

<P><STRONG><a name="[32b]"></a>read_swap_descriptor</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, psm_v2.o(.text.read_swap_descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = read_swap_descriptor &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;psm_read_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deduce_checkpoint_at_init
</UL>

<P><STRONG><a name="[42e]"></a>os_mutex_get</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sys_stdio.o(.text.os_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = os_mutex_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vprintf
</UL>

<P><STRONG><a name="[430]"></a>os_mutex_put</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, sys_stdio.o(.text.os_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_vprintf
</UL>

<P><STRONG><a name="[42b]"></a>os_mutex_create</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sys_stdio.o(.text.os_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = os_mutex_create &rArr; xQueueCreateMutex &rArr; prvInitialiseMutex &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateMutex
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_stdio_init
</UL>

<P><STRONG><a name="[d8]"></a>hwrtc_cb</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, hwrtc.o(.text.hwrtc_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hwrtc_cb &rArr; RTC_ClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwrtc.o(.text.hwrtc_init)
</UL>
<P><STRONG><a name="[368]"></a>os_semaphore_get</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, healthmon.o(.text.os_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = os_semaphore_get &rArr; xQueueSemaphoreTake &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueSemaphoreTake
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_and_find_handler_by_name
</UL>

<P><STRONG><a name="[36c]"></a>os_semaphore_put</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, healthmon.o(.text.os_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = os_semaphore_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_handler_list
</UL>

<P><STRONG><a name="[371]"></a>lock_and_find_handler_by_name</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, healthmon.o(.text.lock_and_find_handler_by_name), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lock_and_find_handler_by_name &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_register_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_unregister_handler
</UL>

<P><STRONG><a name="[372]"></a>unlock_handler_list</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, healthmon.o(.text.unlock_handler_list), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = unlock_handler_list &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_register_handler
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_unregister_handler
</UL>

<P><STRONG><a name="[365]"></a>os_semaphore_create</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, healthmon.o(.text.os_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = os_semaphore_create &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_init
</UL>

<P><STRONG><a name="[d7]"></a>healthmon_loop</STRONG> (Thumb, 510 bytes, Stack size 40 bytes, healthmon.o(.text.healthmon_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = healthmon_loop &rArr; wdt_drv_set_timeout &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_start
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_strobe
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_drv_set_timeout
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self_complete
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_die_handlers
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ticks_to_msec
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_ticks_get
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_put
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_semaphore_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> healthmon.o(.text.healthmon_start)
</UL>
<P><STRONG><a name="[374]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, healthmon.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_start
</UL>

<P><STRONG><a name="[369]"></a>os_ticks_get</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, healthmon.o(.text.os_ticks_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = os_ticks_get &rArr; xTaskGetTickCountFromISR &rArr; vPortValidateInterruptPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCountFromISR
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[36a]"></a>os_ticks_to_msec</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, healthmon.o(.text.os_ticks_to_msec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_ticks_to_msec
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[36b]"></a>call_die_handlers</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, healthmon.o(.text.call_die_handlers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = call_die_handlers
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[36e]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, healthmon.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self_complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[36f]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, healthmon.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_self_complete
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[370]"></a>os_thread_self_complete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, healthmon.o(.text.os_thread_self_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = os_thread_self_complete &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;healthmon_loop
</UL>

<P><STRONG><a name="[2d5]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, w5500_socket.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[2d6]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, w5500_socket.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;connect
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;socket
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disconnect
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recv
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;listen
</UL>

<P><STRONG><a name="[144]"></a>C2D</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, http_parser.o(.text.C2D))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = C2D
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATOI
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unescape_http_url
</UL>

<P><STRONG><a name="[349]"></a>replacetochar</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, http_parser.o(.text.replacetochar))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = replacetochar
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_param_value
</UL>

<P><STRONG><a name="[378]"></a>getHTTPSocketNum</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, http_server.o(.text.getHTTPSocketNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getHTTPSocketNum
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[37b]"></a>http_process_handler</STRONG> (Thumb, 1192 bytes, Stack size 1552 bytes, http_server.o(.text.http_process_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 2920<LI>Call Chain = http_process_handler &rArr; http_post_cgi_handler &rArr; predefined_set_cgi_processor &rArr; set_info &rArr; read_write_mqtt_server3_ip_flash &rArr; get_psm_conf &rArr; psm_get_val &rArr; psm_get_variable_str &rArr; psm_get_variable &rArr; _psm_object_open &rArr; psm_part_compact &rArr; handle_recovery &rArr; psm_copy_all_objects &rArr; psm_upgrade_object &rArr; write_flag_bit &rArr; psm_write_flash &rArr; psm_write_verify &rArr; psm_read_flash &rArr; flash_drv_read &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_post_cgi_handler
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_userReg_webContent
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_get_cgi_handler
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_cgi
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_header
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHTTPSequenceNum
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_http_uri_name
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mid
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_http_uri_type
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[37c]"></a>send_http_response_body</STRONG> (Thumb, 656 bytes, Stack size 48 bytes, http_server.o(.text.send_http_response_body))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = send_http_response_body &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userReg_webContent
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getHTTPSequenceNum
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[37d]"></a>http_disconnect</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, http_server.o(.text.http_disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = http_disconnect &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_WRITE
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIZCHIP_READ
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;httpServer_run
</UL>

<P><STRONG><a name="[383]"></a>getHTTPSequenceNum</STRONG> (Thumb, 88 bytes, Stack size 4 bytes, http_server.o(.text.getHTTPSequenceNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = getHTTPSequenceNum
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_http_response_body
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[384]"></a>send_http_response_header</STRONG> (Thumb, 302 bytes, Stack size 40 bytes, http_server.o(.text.send_http_response_header))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = send_http_response_header &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_http_response_head
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[385]"></a>send_http_response_cgi</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, http_server.o(.text.send_http_response_cgi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = send_http_response_cgi &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_process_handler
</UL>

<P><STRONG><a name="[37f]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, http_server.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_disconnect
</UL>

<P><STRONG><a name="[380]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, http_server.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;http_disconnect
</UL>

<P><STRONG><a name="[4cb]"></a>__NVIC_SystemReset</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, http_util.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_info
</UL>

<P><STRONG><a name="[257]"></a>at_client_para_init</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, aiot_at_client_api.o(.text.at_client_para_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = at_client_para_init &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_init
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_init
</UL>

<P><STRONG><a name="[c2]"></a>client_parser</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.client_parser))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = client_parser &rArr; at_recv_readline &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_get
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aiot_at_client_api.o(.text.at_client_para_init)
</UL>
<P><STRONG><a name="[253]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, aiot_at_client_api.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_deinit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[254]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aiot_at_client_api.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_deinit
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[263]"></a>at_recv_readline</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.at_recv_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = at_recv_readline &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_client_getchar
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_urc_obj
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[264]"></a>get_urc_obj</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, aiot_at_client_api.o(.text.get_urc_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = get_urc_obj &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;client_parser
</UL>

<P><STRONG><a name="[255]"></a>at_client_getchar</STRONG> (Thumb, 124 bytes, Stack size 48 bytes, aiot_at_client_api.o(.text.at_client_getchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = at_client_getchar &rArr; os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_ringbuf_pop_char
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_thread_sleep
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_recv_readline
</UL>

<P><STRONG><a name="[22e]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, aiot_module_api.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
</UL>

<P><STRONG><a name="[22f]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aiot_module_api.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_quick_connect
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_handshake
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_module_init
</UL>

<P><STRONG><a name="[495]"></a>qsdk_nb_set_rtc_time</STRONG> (Thumb, 480 bytes, Stack size 64 bytes, aiot_module_api.o(.text.qsdk_nb_set_rtc_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = qsdk_nb_set_rtc_time &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_nb_get_time
</UL>

<P><STRONG><a name="[208]"></a>CORE_INIT_LIST_HEAD</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, aiot_mqtt_api.o(.text.CORE_INIT_LIST_HEAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CORE_INIT_LIST_HEAD
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_connect
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
</UL>

<P><STRONG><a name="[23b]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, aiot_mqtt_api.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
</UL>

<P><STRONG><a name="[23c]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, aiot_mqtt_api.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;qsdk_mqtt_open
</UL>

<P><STRONG><a name="[203]"></a>_core_mqtt_sublist_destroy</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, aiot_mqtt_api.o(.text._core_mqtt_sublist_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _core_mqtt_sublist_destroy &rArr; core_list_del &rArr; __core_list_del_entry &rArr; __core_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_disconnect
</UL>

<P><STRONG><a name="[204]"></a>core_list_del</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, aiot_mqtt_api.o(.text.core_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_list_del &rArr; __core_list_del_entry &rArr; __core_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__core_list_del_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_destroy
</UL>

<P><STRONG><a name="[205]"></a>_core_mqtt_sublist_insert</STRONG> (Thumb, 426 bytes, Stack size 64 bytes, aiot_mqtt_api.o(.text._core_mqtt_sublist_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _core_mqtt_sublist_insert &rArr; core_list_add_tail &rArr; __core_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_list_add_tail
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORE_INIT_LIST_HEAD
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_sysdep_get_portfile
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aiot_mqtt_sub
</UL>

<P><STRONG><a name="[209]"></a>core_list_add_tail</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, aiot_mqtt_api.o(.text.core_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = core_list_add_tail &rArr; __core_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__core_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_core_mqtt_sublist_insert
</UL>

<P><STRONG><a name="[1ff]"></a>__core_list_del_entry</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aiot_mqtt_api.o(.text.__core_list_del_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __core_list_del_entry &rArr; __core_list_del
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__core_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_list_del
</UL>

<P><STRONG><a name="[200]"></a>__core_list_del</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, aiot_mqtt_api.o(.text.__core_list_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __core_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__core_list_del_entry
</UL>

<P><STRONG><a name="[2dd]"></a>__core_list_add</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, aiot_mqtt_api.o(.text.__core_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __core_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_list_add_tail
</UL>

<P><STRONG><a name="[403]"></a>os_msec_to_ticks</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, posix_port.o(.text.os_msec_to_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = os_msec_to_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_control_thread
</UL>

<P><STRONG><a name="[404]"></a>os_thread_sleep</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, posix_port.o(.text.os_thread_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = os_thread_sleep &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_control_thread
</UL>

<P><STRONG><a name="[405]"></a>os_thread_create</STRONG> (Thumb, 66 bytes, Stack size 40 bytes, posix_port.o(.text.os_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = os_thread_create &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_rx_process_init
</UL>

<P><STRONG><a name="[38f]"></a>jsmn_alloc_token</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, jsmn.o(.text.jsmn_alloc_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
</UL>

<P><STRONG><a name="[390]"></a>jsmn_parse_string</STRONG> (Thumb, 648 bytes, Stack size 56 bytes, jsmn.o(.text.jsmn_parse_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = jsmn_parse_string &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[391]"></a>jsmn_parse_primitive</STRONG> (Thumb, 290 bytes, Stack size 48 bytes, jsmn.o(.text.jsmn_parse_primitive))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = jsmn_parse_primitive &rArr; jsmn_alloc_token
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_fill_token
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_alloc_token
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse
</UL>

<P><STRONG><a name="[392]"></a>jsmn_fill_token</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, jsmn.o(.text.jsmn_fill_token))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = jsmn_fill_token
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_primitive
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_parse_string
</UL>

<P><STRONG><a name="[4e3]"></a>skip</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, json_generator.o(.text.skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = skip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;verify_json_start
</UL>

<P><STRONG><a name="[394]"></a>verify_buffer_limit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, json_generator.o(.text.verify_buffer_limit))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = verify_buffer_limit &rArr; sys_printf &rArr; sys_vprintf &rArr; os_mutex_put &rArr; xQueueGenericSend &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_close_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
</UL>

<P><STRONG><a name="[3a4]"></a>rev_skip</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, json_generator.o(.text.rev_skip))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rev_skip
</UL>
<BR>[Called By]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_set_object_value
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_push_object
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_start_object
</UL>

<P><STRONG><a name="[396]"></a>json_get_value</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, json_parser.o(.text.json_get_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = json_get_value &rArr; json_token_streq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_to_last
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_token_streq
</UL>
<BR>[Called By]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_val_str_len
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_val_str
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_composite_object
</UL>

<P><STRONG><a name="[39a]"></a>json_token_streq</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, json_parser.o(.text.json_token_streq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = json_token_streq &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value
</UL>

<P><STRONG><a name="[202]"></a>skip_to_last</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, json_parser.o(.text.skip_to_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = skip_to_last &rArr;  skip_to_last (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_to_last
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__json_is_valid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_to_last
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_value
</UL>

<P><STRONG><a name="[398]"></a>json_str_to_str</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, json_parser.o(.text.json_str_to_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = json_str_to_str &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_get_val_str
</UL>

<P><STRONG><a name="[39c]"></a>json_obj_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, json_parser.o(.text.json_obj_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = json_obj_init &rArr; jsmn_init
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jsmn_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_init
</UL>

<P><STRONG><a name="[39d]"></a>json_is_object_valid</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, json_parser.o(.text.json_is_object_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = json_is_object_valid &rArr; __json_is_valid &rArr;  __json_is_valid (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__json_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_init
</UL>

<P><STRONG><a name="[39e]"></a>json_is_array_valid</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, json_parser.o(.text.json_is_array_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = json_is_array_valid &rArr; __json_is_valid &rArr;  __json_is_valid (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__json_is_valid
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_init
</UL>

<P><STRONG><a name="[201]"></a>__json_is_valid</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, json_parser.o(.text.__json_is_valid))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = __json_is_valid &rArr;  __json_is_valid (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__json_is_valid
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_to_last
</UL>
<BR>[Called By]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__json_is_valid
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_is_array_valid
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_is_object_valid
</UL>

<P><STRONG><a name="[3a1]"></a>os_mem_calloc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, json_parser.o(.text.os_mem_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = os_mem_calloc &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;json_parse_start
</UL>

<P><STRONG><a name="[504]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4fe]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsnprintf
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[507]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[506]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[105]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0snprintf)
<LI> printfa.o(i.__0vsnprintf)
</UL>
<P><STRONG><a name="[106]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[138]"></a>_fp_value</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[bc]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[13c]"></a>_local_sscanf</STRONG> (Thumb, 62 bytes, Stack size 64 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
